
L01-ASM-F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000204  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003ac  080003b4  000103b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003ac  080003ac  000103b4  2**0
                  CONTENTS
  4 .ARM          00000000  080003ac  080003ac  000103b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003ac  080003b4  000103b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003ac  080003ac  000103ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003b0  080003b0  000103b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003b4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003b4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103b4  2**0
                  CONTENTS, READONLY
 12 .debug_line   00000132  00000000  00000000  000103e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00000048  00000000  00000000  00010516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000026  00000000  00000000  0001055e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  00010588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00000072  00000000  00000000  000105d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000020  00000000  00000000  00010648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000002c  00000000  00000000  00010668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000394 	.word	0x08000394

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000394 	.word	0x08000394

080001e8 <main>:

//.thumb_func                		@ Force the assembler to call this function in Thumb mode, that means the least significant bit in address is set
                        		@ Using this bit, the ARM core knows whether is jumping to the ARM or Thumb code, Cortex supports only Thumb
                        		@ Also you can use ".type    _start, %function"
main:
	LDR		R1,  =RCC_AHB1ENR	// RCC enable for PORTD on AHB. Load RCC address to register R1
 80001e8:	493c      	ldr	r1, [pc, #240]	; (80002dc <led_OFF4+0x10>)
	LDR		R0,  [R1]			// Read current value from RCC_AHB1ENR (using address in register R1)
 80001ea:	6808      	ldr	r0, [r1, #0]
	LDR		R2,  =(1 << 3)		// Prepare the immediate value in R2 (3rd bit should be set for PORTD)
 80001ec:	f04f 0208 	mov.w	r2, #8
	ORR		R0,  R2				// ORR with previously read value
 80001f0:	4310      	orrs	r0, r2
	STR		R0,  [R1]			// Store new value to RCC_AHB1ENR
 80001f2:	6008      	str	r0, [r1, #0]

	LDR		R1,  =GPIOD_MODER	// Similar as above but for MODER
 80001f4:	493a      	ldr	r1, [pc, #232]	; (80002e0 <led_OFF4+0x14>)
	LDR		R0,  [R1]
 80001f6:	6808      	ldr	r0, [r1, #0]
	LDR		R2,  =0x55000000
 80001f8:	f04f 42aa 	mov.w	r2, #1426063360	; 0x55000000
	ORR		R0,  R2
 80001fc:	4310      	orrs	r0, r2
	LDR		R2,  =0x55FFFFFF	// For readability should be replaced by (x << n) statement
 80001fe:	f06f 422a 	mvn.w	r2, #2852126720	; 0xaa000000
	AND		R0,  R2
 8000202:	4010      	ands	r0, r2
	STR		R0,  [R1]
 8000204:	6008      	str	r0, [r1, #0]

	LDR		R1,  =GPIOD_OTYPER	// Similar as above but for OTYPER
 8000206:	4937      	ldr	r1, [pc, #220]	; (80002e4 <led_OFF4+0x18>)
	LDR		R0,  [R1]
 8000208:	6808      	ldr	r0, [r1, #0]
	LDR		R2,  =0xFFFF0FFF
 800020a:	f46f 4270 	mvn.w	r2, #61440	; 0xf000
	AND		R0,  R2
 800020e:	4010      	ands	r0, r2
	STR		R0,  [R1]
 8000210:	6008      	str	r0, [r1, #0]

	LDR		R1,  =GPIOD_OSPEEDR	// Similar as above but for OSPEEDR
 8000212:	4935      	ldr	r1, [pc, #212]	; (80002e8 <led_OFF4+0x1c>)
	LDR		R0,  [R1]
 8000214:	6808      	ldr	r0, [r1, #0]
	LDR		R2,  =0x00FFFFFF
 8000216:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
	AND		R0,  R2
 800021a:	4010      	ands	r0, r2
	STR		R0,  [R1]
 800021c:	6008      	str	r0, [r1, #0]

	LDR		R1,  =GPIOD_PUPDR	// Similar as above but for PUPDR
 800021e:	4933      	ldr	r1, [pc, #204]	; (80002ec <led_OFF4+0x20>)
	LDR		R0,  [R1]
 8000220:	6808      	ldr	r0, [r1, #0]
	LDR		R2,  =0x00FFFFFF
 8000222:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
	AND		R0,  R2
 8000226:	4010      	ands	r0, r2
	STR		R0,  [R1]
 8000228:	6008      	str	r0, [r1, #0]

0800022a <loop>:

loop:

	LDR		R2,  =LOOP_DELAY	// Set initial delay counter
 800022a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000

0800022e <delay1>:

delay1:
    CBZ		R2,  led_ON1			// delay loop
 800022e:	b10a      	cbz	r2, 8000234 <led_ON1>
    SUB		R2,  R2, #1
 8000230:	3a01      	subs	r2, #1
    B 	    delay1
 8000232:	e7fc      	b.n	800022e <delay1>

08000234 <led_ON1>:

led_ON1:
    LDR		R1,  =GPIOD_ODR
 8000234:	492e      	ldr	r1, [pc, #184]	; (80002f0 <led_OFF4+0x24>)
    LDR		R0,  [R1]
 8000236:	6808      	ldr	r0, [r1, #0]
    LDR		R2,  =0x00001000
 8000238:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    ORR		R0,  R2
 800023c:	4310      	orrs	r0, r2
    STR		R0,  [R1]
 800023e:	6008      	str	r0, [r1, #0]

	LDR		R2,  =LOOP_DELAY	// Set initial delay counter
 8000240:	f44f 1200 	mov.w	r2, #2097152	; 0x200000

08000244 <delay2>:

delay2:
    CBZ		R2,  led_ON2			// delay loop
 8000244:	b10a      	cbz	r2, 800024a <led_ON2>
    SUB		R2,  R2, #1
 8000246:	3a01      	subs	r2, #1
    B 	    delay2
 8000248:	e7fc      	b.n	8000244 <delay2>

0800024a <led_ON2>:

led_ON2:
    LDR		R1,  =GPIOD_ODR
 800024a:	4929      	ldr	r1, [pc, #164]	; (80002f0 <led_OFF4+0x24>)
    LDR		R0,  [R1]
 800024c:	6808      	ldr	r0, [r1, #0]
    LDR		R2,  =0x00002000
 800024e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    ORR		R0,  R2
 8000252:	4310      	orrs	r0, r2
    STR		R0,  [R1]
 8000254:	6008      	str	r0, [r1, #0]

	LDR		R2,  =LOOP_DELAY	// Set initial delay counter
 8000256:	f44f 1200 	mov.w	r2, #2097152	; 0x200000

0800025a <delay3>:

delay3:
    CBZ		R2,  led_ON3			// delay loop
 800025a:	b10a      	cbz	r2, 8000260 <led_ON3>
    SUB		R2,  R2, #1
 800025c:	3a01      	subs	r2, #1
    B 	    delay3
 800025e:	e7fc      	b.n	800025a <delay3>

08000260 <led_ON3>:

led_ON3:
    LDR		R1,  =GPIOD_ODR
 8000260:	4923      	ldr	r1, [pc, #140]	; (80002f0 <led_OFF4+0x24>)
    LDR		R0,  [R1]
 8000262:	6808      	ldr	r0, [r1, #0]
    LDR		R2,  =0x00004000
 8000264:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    ORR		R0,  R2
 8000268:	4310      	orrs	r0, r2
    STR		R0,  [R1]
 800026a:	6008      	str	r0, [r1, #0]

	LDR		R2,  =LOOP_DELAY	// Set initial delay counter
 800026c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000

08000270 <delay4>:

delay4:
    CBZ		R2,  led_ON4			// delay loop
 8000270:	b10a      	cbz	r2, 8000276 <led_ON4>
    SUB		R2,  R2, #1
 8000272:	3a01      	subs	r2, #1
    B 	    delay4
 8000274:	e7fc      	b.n	8000270 <delay4>

08000276 <led_ON4>:

led_ON4:
    LDR		R1,  =GPIOD_ODR
 8000276:	491e      	ldr	r1, [pc, #120]	; (80002f0 <led_OFF4+0x24>)
    LDR		R0,  [R1]
 8000278:	6808      	ldr	r0, [r1, #0]
    LDR		R2,  =0x0000F000
 800027a:	f44f 4270 	mov.w	r2, #61440	; 0xf000
    ORR		R0,  R2
 800027e:	4310      	orrs	r0, r2
    STR		R0,  [R1]
 8000280:	6008      	str	r0, [r1, #0]

	LDR		R2,  =LOOP_DELAY	// Set initial delay counter
 8000282:	f44f 1200 	mov.w	r2, #2097152	; 0x200000

08000286 <delayOFF1>:

delayOFF1:
    CBZ		R2,  led_OFF1
 8000286:	b10a      	cbz	r2, 800028c <led_OFF1>
    SUB		R2,  R2, #1
 8000288:	3a01      	subs	r2, #1
    B		delayOFF1
 800028a:	e7fc      	b.n	8000286 <delayOFF1>

0800028c <led_OFF1>:

led_OFF1:
    LDR		R1,  =GPIOD_ODR
 800028c:	4918      	ldr	r1, [pc, #96]	; (80002f0 <led_OFF4+0x24>)
    LDR		R0,  [R1]
 800028e:	6808      	ldr	r0, [r1, #0]
    LDR		R2,  =0xFFFEFFF
 8000290:	4a18      	ldr	r2, [pc, #96]	; (80002f4 <led_OFF4+0x28>)
    AND		R0,  R2
 8000292:	4010      	ands	r0, r2
    STR		R0,  [R1]
 8000294:	6008      	str	r0, [r1, #0]

   	LDR		R2,  =LOOP_DELAY	// Set initial delay counter
 8000296:	f44f 1200 	mov.w	r2, #2097152	; 0x200000

0800029a <delayOFF2>:

delayOFF2:
    CBZ		R2,  led_OFF2
 800029a:	b10a      	cbz	r2, 80002a0 <led_OFF2>
    SUB		R2,  R2, #1
 800029c:	3a01      	subs	r2, #1
    B		delayOFF2
 800029e:	e7fc      	b.n	800029a <delayOFF2>

080002a0 <led_OFF2>:

led_OFF2:
    LDR		R1,  =GPIOD_ODR
 80002a0:	4913      	ldr	r1, [pc, #76]	; (80002f0 <led_OFF4+0x24>)
    LDR		R0,  [R1]
 80002a2:	6808      	ldr	r0, [r1, #0]
    LDR		R2,  =0xFFFFCFFF
 80002a4:	f46f 5240 	mvn.w	r2, #12288	; 0x3000
    AND		R0,  R2
 80002a8:	4010      	ands	r0, r2
    STR		R0,  [R1]
 80002aa:	6008      	str	r0, [r1, #0]

    LDR		R2,  =LOOP_DELAY	// Set initial delay counter
 80002ac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000

080002b0 <delayOFF3>:

delayOFF3:
    CBZ		R2,  led_OFF3
 80002b0:	b10a      	cbz	r2, 80002b6 <led_OFF3>
    SUB		R2,  R2, #1
 80002b2:	3a01      	subs	r2, #1
    B		delayOFF3
 80002b4:	e7fc      	b.n	80002b0 <delayOFF3>

080002b6 <led_OFF3>:

led_OFF3:
    LDR		R1,  =GPIOD_ODR
 80002b6:	490e      	ldr	r1, [pc, #56]	; (80002f0 <led_OFF4+0x24>)
    LDR		R0,  [R1]
 80002b8:	6808      	ldr	r0, [r1, #0]
    LDR		R2,  =0xFFFF9FFF
 80002ba:	f46f 42c0 	mvn.w	r2, #24576	; 0x6000
    AND		R0,  R2
 80002be:	4010      	ands	r0, r2
    STR		R0,  [R1]
 80002c0:	6008      	str	r0, [r1, #0]

	LDR		R2,  =LOOP_DELAY	// Set initial delay counter
 80002c2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000

080002c6 <delayOFF4>:

delayOFF4:
    CBZ		R2,  led_OFF4
 80002c6:	b10a      	cbz	r2, 80002cc <led_OFF4>
    SUB		R2,  R2, #1
 80002c8:	3a01      	subs	r2, #1
    B		delayOFF4
 80002ca:	e7fc      	b.n	80002c6 <delayOFF4>

080002cc <led_OFF4>:

led_OFF4:
    LDR		R1,  =GPIOD_ODR
 80002cc:	4908      	ldr	r1, [pc, #32]	; (80002f0 <led_OFF4+0x24>)
    LDR		R0,  [R1]
 80002ce:	6808      	ldr	r0, [r1, #0]
    LDR		R2,  =0xFFFF0FFF
 80002d0:	f46f 4270 	mvn.w	r2, #61440	; 0xf000
    AND		R0,  R2
 80002d4:	4010      	ands	r0, r2
    STR		R0,  [R1]
 80002d6:	6008      	str	r0, [r1, #0]

	B		loop				// infinite loop
 80002d8:	e7a7      	b.n	800022a <loop>
 80002da:	0000      	.short	0x0000
	LDR		R1,  =RCC_AHB1ENR	// RCC enable for PORTD on AHB. Load RCC address to register R1
 80002dc:	40023830 	.word	0x40023830
	LDR		R1,  =GPIOD_MODER	// Similar as above but for MODER
 80002e0:	40020c00 	.word	0x40020c00
	LDR		R1,  =GPIOD_OTYPER	// Similar as above but for OTYPER
 80002e4:	40020c04 	.word	0x40020c04
	LDR		R1,  =GPIOD_OSPEEDR	// Similar as above but for OSPEEDR
 80002e8:	40020c08 	.word	0x40020c08
	LDR		R1,  =GPIOD_PUPDR	// Similar as above but for PUPDR
 80002ec:	40020c0c 	.word	0x40020c0c
    LDR		R1,  =GPIOD_ODR
 80002f0:	40020c14 	.word	0x40020c14
    LDR		R2,  =0xFFFEFFF
 80002f4:	0fffefff 	.word	0x0fffefff

080002f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002f8:	480d      	ldr	r0, [pc, #52]	; (8000330 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002fa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000300:	480c      	ldr	r0, [pc, #48]	; (8000334 <LoopForever+0x6>)
  ldr r1, =_edata
 8000302:	490d      	ldr	r1, [pc, #52]	; (8000338 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000304:	4a0d      	ldr	r2, [pc, #52]	; (800033c <LoopForever+0xe>)
  movs r3, #0
 8000306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000308:	e002      	b.n	8000310 <LoopCopyDataInit>

0800030a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800030a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800030c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800030e:	3304      	adds	r3, #4

08000310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000314:	d3f9      	bcc.n	800030a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000316:	4a0a      	ldr	r2, [pc, #40]	; (8000340 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000318:	4c0a      	ldr	r4, [pc, #40]	; (8000344 <LoopForever+0x16>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800031c:	e001      	b.n	8000322 <LoopFillZerobss>

0800031e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800031e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000320:	3204      	adds	r2, #4

08000322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000324:	d3fb      	bcc.n	800031e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000326:	f000 f811 	bl	800034c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800032a:	f7ff ff5d 	bl	80001e8 <main>

0800032e <LoopForever>:

LoopForever:
    b LoopForever
 800032e:	e7fe      	b.n	800032e <LoopForever>
  ldr   r0, =_estack
 8000330:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000338:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800033c:	080003b4 	.word	0x080003b4
  ldr r2, =_sbss
 8000340:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000344:	2000001c 	.word	0x2000001c

08000348 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000348:	e7fe      	b.n	8000348 <ADC_IRQHandler>
	...

0800034c <__libc_init_array>:
 800034c:	b570      	push	{r4, r5, r6, lr}
 800034e:	4d0d      	ldr	r5, [pc, #52]	; (8000384 <__libc_init_array+0x38>)
 8000350:	4c0d      	ldr	r4, [pc, #52]	; (8000388 <__libc_init_array+0x3c>)
 8000352:	1b64      	subs	r4, r4, r5
 8000354:	10a4      	asrs	r4, r4, #2
 8000356:	2600      	movs	r6, #0
 8000358:	42a6      	cmp	r6, r4
 800035a:	d109      	bne.n	8000370 <__libc_init_array+0x24>
 800035c:	4d0b      	ldr	r5, [pc, #44]	; (800038c <__libc_init_array+0x40>)
 800035e:	4c0c      	ldr	r4, [pc, #48]	; (8000390 <__libc_init_array+0x44>)
 8000360:	f000 f818 	bl	8000394 <_init>
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	10a4      	asrs	r4, r4, #2
 8000368:	2600      	movs	r6, #0
 800036a:	42a6      	cmp	r6, r4
 800036c:	d105      	bne.n	800037a <__libc_init_array+0x2e>
 800036e:	bd70      	pop	{r4, r5, r6, pc}
 8000370:	f855 3b04 	ldr.w	r3, [r5], #4
 8000374:	4798      	blx	r3
 8000376:	3601      	adds	r6, #1
 8000378:	e7ee      	b.n	8000358 <__libc_init_array+0xc>
 800037a:	f855 3b04 	ldr.w	r3, [r5], #4
 800037e:	4798      	blx	r3
 8000380:	3601      	adds	r6, #1
 8000382:	e7f2      	b.n	800036a <__libc_init_array+0x1e>
 8000384:	080003ac 	.word	0x080003ac
 8000388:	080003ac 	.word	0x080003ac
 800038c:	080003ac 	.word	0x080003ac
 8000390:	080003b0 	.word	0x080003b0

08000394 <_init>:
 8000394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000396:	bf00      	nop
 8000398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039a:	bc08      	pop	{r3}
 800039c:	469e      	mov	lr, r3
 800039e:	4770      	bx	lr

080003a0 <_fini>:
 80003a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a2:	bf00      	nop
 80003a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003a6:	bc08      	pop	{r3}
 80003a8:	469e      	mov	lr, r3
 80003aa:	4770      	bx	lr
