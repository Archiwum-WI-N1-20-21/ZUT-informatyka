
L05-01-TFT_F3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004090  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004224  08004224  00014224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800425c  0800425c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800425c  0800425c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800425c  0800425c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800425c  0800425c  0001425c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004260  08004260  00014260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000000c  08004270  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08004270  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c8f4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201f  00000000  00000000  0002c930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  0002e950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c8  00000000  00000000  0002f2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001feba  00000000  00000000  0002fbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf2a  00000000  00000000  0004fa72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c38c1  00000000  00000000  0005c99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012025d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025cc  00000000  00000000  001202b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800420c 	.word	0x0800420c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800420c 	.word	0x0800420c

080001d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b08a      	sub	sp, #40	; 0x28
 80001d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001da:	f107 0314 	add.w	r3, r7, #20
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ea:	4b41      	ldr	r3, [pc, #260]	; (80002f0 <MX_GPIO_Init+0x11c>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	4a40      	ldr	r2, [pc, #256]	; (80002f0 <MX_GPIO_Init+0x11c>)
 80001f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80001f4:	6153      	str	r3, [r2, #20]
 80001f6:	4b3e      	ldr	r3, [pc, #248]	; (80002f0 <MX_GPIO_Init+0x11c>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80001fe:	613b      	str	r3, [r7, #16]
 8000200:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000202:	4b3b      	ldr	r3, [pc, #236]	; (80002f0 <MX_GPIO_Init+0x11c>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	4a3a      	ldr	r2, [pc, #232]	; (80002f0 <MX_GPIO_Init+0x11c>)
 8000208:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800020c:	6153      	str	r3, [r2, #20]
 800020e:	4b38      	ldr	r3, [pc, #224]	; (80002f0 <MX_GPIO_Init+0x11c>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000216:	60fb      	str	r3, [r7, #12]
 8000218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800021a:	4b35      	ldr	r3, [pc, #212]	; (80002f0 <MX_GPIO_Init+0x11c>)
 800021c:	695b      	ldr	r3, [r3, #20]
 800021e:	4a34      	ldr	r2, [pc, #208]	; (80002f0 <MX_GPIO_Init+0x11c>)
 8000220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000224:	6153      	str	r3, [r2, #20]
 8000226:	4b32      	ldr	r3, [pc, #200]	; (80002f0 <MX_GPIO_Init+0x11c>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800022e:	60bb      	str	r3, [r7, #8]
 8000230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000232:	4b2f      	ldr	r3, [pc, #188]	; (80002f0 <MX_GPIO_Init+0x11c>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	4a2e      	ldr	r2, [pc, #184]	; (80002f0 <MX_GPIO_Init+0x11c>)
 8000238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800023c:	6153      	str	r3, [r2, #20]
 800023e:	4b2c      	ldr	r3, [pc, #176]	; (80002f0 <MX_GPIO_Init+0x11c>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000246:	607b      	str	r3, [r7, #4]
 8000248:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 800024a:	2200      	movs	r2, #0
 800024c:	2180      	movs	r1, #128	; 0x80
 800024e:	4829      	ldr	r0, [pc, #164]	; (80002f4 <MX_GPIO_Init+0x120>)
 8000250:	f001 fafa 	bl	8001848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000254:	2200      	movs	r2, #0
 8000256:	f44f 7180 	mov.w	r1, #256	; 0x100
 800025a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800025e:	f001 faf3 	bl	8001848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000262:	2200      	movs	r2, #0
 8000264:	2140      	movs	r1, #64	; 0x40
 8000266:	4824      	ldr	r0, [pc, #144]	; (80002f8 <MX_GPIO_Init+0x124>)
 8000268:	f001 faee 	bl	8001848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800026c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000272:	4b22      	ldr	r3, [pc, #136]	; (80002fc <MX_GPIO_Init+0x128>)
 8000274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000276:	2300      	movs	r3, #0
 8000278:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800027a:	f107 0314 	add.w	r3, r7, #20
 800027e:	4619      	mov	r1, r3
 8000280:	481c      	ldr	r0, [pc, #112]	; (80002f4 <MX_GPIO_Init+0x120>)
 8000282:	f001 f957 	bl	8001534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000286:	2380      	movs	r3, #128	; 0x80
 8000288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800028a:	2301      	movs	r3, #1
 800028c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800028e:	2300      	movs	r3, #0
 8000290:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000292:	2303      	movs	r3, #3
 8000294:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000296:	f107 0314 	add.w	r3, r7, #20
 800029a:	4619      	mov	r1, r3
 800029c:	4815      	ldr	r0, [pc, #84]	; (80002f4 <MX_GPIO_Init+0x120>)
 800029e:	f001 f949 	bl	8001534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 80002a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a8:	2301      	movs	r3, #1
 80002aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ac:	2300      	movs	r3, #0
 80002ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002b0:	2303      	movs	r3, #3
 80002b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 80002b4:	f107 0314 	add.w	r3, r7, #20
 80002b8:	4619      	mov	r1, r3
 80002ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002be:	f001 f939 	bl	8001534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80002c2:	2340      	movs	r3, #64	; 0x40
 80002c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c6:	2301      	movs	r3, #1
 80002c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ca:	2300      	movs	r3, #0
 80002cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002ce:	2303      	movs	r3, #3
 80002d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80002d2:	f107 0314 	add.w	r3, r7, #20
 80002d6:	4619      	mov	r1, r3
 80002d8:	4807      	ldr	r0, [pc, #28]	; (80002f8 <MX_GPIO_Init+0x124>)
 80002da:	f001 f92b 	bl	8001534 <HAL_GPIO_Init>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB6_FMP);
 80002de:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80002e2:	f001 fac9 	bl	8001878 <HAL_I2CEx_EnableFastModePlus>

}
 80002e6:	bf00      	nop
 80002e8:	3728      	adds	r7, #40	; 0x28
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	40021000 	.word	0x40021000
 80002f4:	48000800 	.word	0x48000800
 80002f8:	48000400 	.word	0x48000400
 80002fc:	10210000 	.word	0x10210000

08000300 <lcd_write_byte>:

uint8_t lcd_id;
uint8_t _rotation = 0;

void lcd_write_byte(uint8_t chByte, uint8_t chCmd)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	460a      	mov	r2, r1
 800030a:	71fb      	strb	r3, [r7, #7]
 800030c:	4613      	mov	r3, r2
 800030e:	71bb      	strb	r3, [r7, #6]
    if (chCmd) {
 8000310:	79bb      	ldrb	r3, [r7, #6]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d007      	beq.n	8000326 <lcd_write_byte+0x26>
        __LCD_DC_SET();
 8000316:	2201      	movs	r2, #1
 8000318:	f44f 7180 	mov.w	r1, #256	; 0x100
 800031c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000320:	f001 fa92 	bl	8001848 <HAL_GPIO_WritePin>
 8000324:	e006      	b.n	8000334 <lcd_write_byte+0x34>
    } else {
        __LCD_DC_CLR();
 8000326:	2200      	movs	r2, #0
 8000328:	f44f 7180 	mov.w	r1, #256	; 0x100
 800032c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000330:	f001 fa8a 	bl	8001848 <HAL_GPIO_WritePin>
    }
    __LCD_CS_CLR();
 8000334:	2200      	movs	r2, #0
 8000336:	2140      	movs	r1, #64	; 0x40
 8000338:	4808      	ldr	r0, [pc, #32]	; (800035c <lcd_write_byte+0x5c>)
 800033a:	f001 fa85 	bl	8001848 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1,&chByte,1,0xff);
 800033e:	1df9      	adds	r1, r7, #7
 8000340:	23ff      	movs	r3, #255	; 0xff
 8000342:	2201      	movs	r2, #1
 8000344:	4806      	ldr	r0, [pc, #24]	; (8000360 <lcd_write_byte+0x60>)
 8000346:	f002 fecc 	bl	80030e2 <HAL_SPI_Transmit>
    __LCD_CS_SET();
 800034a:	2201      	movs	r2, #1
 800034c:	2140      	movs	r1, #64	; 0x40
 800034e:	4803      	ldr	r0, [pc, #12]	; (800035c <lcd_write_byte+0x5c>)
 8000350:	f001 fa7a 	bl	8001848 <HAL_GPIO_WritePin>
}
 8000354:	bf00      	nop
 8000356:	3708      	adds	r7, #8
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	48000400 	.word	0x48000400
 8000360:	2000002c 	.word	0x2000002c

08000364 <lcd_write_word>:

void lcd_write_word(uint16_t hwData)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	80fb      	strh	r3, [r7, #6]
		uint8_t hval = hwData >> 8;
 800036e:	88fb      	ldrh	r3, [r7, #6]
 8000370:	0a1b      	lsrs	r3, r3, #8
 8000372:	b29b      	uxth	r3, r3
 8000374:	b2db      	uxtb	r3, r3
 8000376:	73fb      	strb	r3, [r7, #15]
		uint8_t lval = hwData & 0xFF;
 8000378:	88fb      	ldrh	r3, [r7, #6]
 800037a:	b2db      	uxtb	r3, r3
 800037c:	73bb      	strb	r3, [r7, #14]
    __LCD_DC_SET();
 800037e:	2201      	movs	r2, #1
 8000380:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000384:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000388:	f001 fa5e 	bl	8001848 <HAL_GPIO_WritePin>
    __LCD_CS_CLR();
 800038c:	2200      	movs	r2, #0
 800038e:	2140      	movs	r1, #64	; 0x40
 8000390:	480c      	ldr	r0, [pc, #48]	; (80003c4 <lcd_write_word+0x60>)
 8000392:	f001 fa59 	bl	8001848 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1,&hval,1,0xff);
 8000396:	f107 010f 	add.w	r1, r7, #15
 800039a:	23ff      	movs	r3, #255	; 0xff
 800039c:	2201      	movs	r2, #1
 800039e:	480a      	ldr	r0, [pc, #40]	; (80003c8 <lcd_write_word+0x64>)
 80003a0:	f002 fe9f 	bl	80030e2 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1,&lval,1,0xff);
 80003a4:	f107 010e 	add.w	r1, r7, #14
 80003a8:	23ff      	movs	r3, #255	; 0xff
 80003aa:	2201      	movs	r2, #1
 80003ac:	4806      	ldr	r0, [pc, #24]	; (80003c8 <lcd_write_word+0x64>)
 80003ae:	f002 fe98 	bl	80030e2 <HAL_SPI_Transmit>
    __LCD_CS_SET();
 80003b2:	2201      	movs	r2, #1
 80003b4:	2140      	movs	r1, #64	; 0x40
 80003b6:	4803      	ldr	r0, [pc, #12]	; (80003c4 <lcd_write_word+0x60>)
 80003b8:	f001 fa46 	bl	8001848 <HAL_GPIO_WritePin>
}
 80003bc:	bf00      	nop
 80003be:	3710      	adds	r7, #16
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	48000400 	.word	0x48000400
 80003c8:	2000002c 	.word	0x2000002c

080003cc <lcd_write_register>:

static void lcd_write_register(uint8_t chRegister, uint8_t chValue)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	460a      	mov	r2, r1
 80003d6:	71fb      	strb	r3, [r7, #7]
 80003d8:	4613      	mov	r3, r2
 80003da:	71bb      	strb	r3, [r7, #6]
	lcd_write_byte(chRegister, LCD_CMD);
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	2100      	movs	r1, #0
 80003e0:	4618      	mov	r0, r3
 80003e2:	f7ff ff8d 	bl	8000300 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 80003e6:	79bb      	ldrb	r3, [r7, #6]
 80003e8:	2101      	movs	r1, #1
 80003ea:	4618      	mov	r0, r3
 80003ec:	f7ff ff88 	bl	8000300 <lcd_write_byte>
}
 80003f0:	bf00      	nop
 80003f2:	3708      	adds	r7, #8
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}

080003f8 <lcd_set_cursor>:

//set the specified position of cursor on lcd.
//hwXpos specify x position
//hwYpos specify y position
void lcd_set_cursor(uint16_t hwXpos, uint16_t hwYpos)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	460a      	mov	r2, r1
 8000402:	80fb      	strh	r3, [r7, #6]
 8000404:	4613      	mov	r3, r2
 8000406:	80bb      	strh	r3, [r7, #4]
	if(ST7789V == lcd_id){
 8000408:	4b48      	ldr	r3, [pc, #288]	; (800052c <lcd_set_cursor+0x134>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	2b52      	cmp	r3, #82	; 0x52
 800040e:	d14d      	bne.n	80004ac <lcd_set_cursor+0xb4>
		if(1==_rotation||3==_rotation){
 8000410:	4b47      	ldr	r3, [pc, #284]	; (8000530 <lcd_set_cursor+0x138>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b01      	cmp	r3, #1
 8000416:	d003      	beq.n	8000420 <lcd_set_cursor+0x28>
 8000418:	4b45      	ldr	r3, [pc, #276]	; (8000530 <lcd_set_cursor+0x138>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b03      	cmp	r3, #3
 800041e:	d120      	bne.n	8000462 <lcd_set_cursor+0x6a>
			lcd_write_byte(0x2A,LCD_CMD);
 8000420:	2100      	movs	r1, #0
 8000422:	202a      	movs	r0, #42	; 0x2a
 8000424:	f7ff ff6c 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(((hwXpos)>>8)&0xff,LCD_DATA);
 8000428:	88fb      	ldrh	r3, [r7, #6]
 800042a:	0a1b      	lsrs	r3, r3, #8
 800042c:	b29b      	uxth	r3, r3
 800042e:	b2db      	uxtb	r3, r3
 8000430:	2101      	movs	r1, #1
 8000432:	4618      	mov	r0, r3
 8000434:	f7ff ff64 	bl	8000300 <lcd_write_byte>
			lcd_write_byte((hwXpos)&0xff,LCD_DATA);
 8000438:	88fb      	ldrh	r3, [r7, #6]
 800043a:	b2db      	uxtb	r3, r3
 800043c:	2101      	movs	r1, #1
 800043e:	4618      	mov	r0, r3
 8000440:	f7ff ff5e 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x2B,LCD_CMD);
 8000444:	2100      	movs	r1, #0
 8000446:	202b      	movs	r0, #43	; 0x2b
 8000448:	f7ff ff5a 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x00,LCD_DATA);
 800044c:	2101      	movs	r1, #1
 800044e:	2000      	movs	r0, #0
 8000450:	f7ff ff56 	bl	8000300 <lcd_write_byte>
			lcd_write_byte((hwYpos)&0xff,LCD_DATA);
 8000454:	88bb      	ldrh	r3, [r7, #4]
 8000456:	b2db      	uxtb	r3, r3
 8000458:	2101      	movs	r1, #1
 800045a:	4618      	mov	r0, r3
 800045c:	f7ff ff50 	bl	8000300 <lcd_write_byte>
 8000460:	e01f      	b.n	80004a2 <lcd_set_cursor+0xaa>
		}else{
			lcd_write_byte(0x2A,LCD_CMD);
 8000462:	2100      	movs	r1, #0
 8000464:	202a      	movs	r0, #42	; 0x2a
 8000466:	f7ff ff4b 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x00,LCD_DATA);
 800046a:	2101      	movs	r1, #1
 800046c:	2000      	movs	r0, #0
 800046e:	f7ff ff47 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(hwXpos&0xff,LCD_DATA);
 8000472:	88fb      	ldrh	r3, [r7, #6]
 8000474:	b2db      	uxtb	r3, r3
 8000476:	2101      	movs	r1, #1
 8000478:	4618      	mov	r0, r3
 800047a:	f7ff ff41 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x2B,LCD_CMD);
 800047e:	2100      	movs	r1, #0
 8000480:	202b      	movs	r0, #43	; 0x2b
 8000482:	f7ff ff3d 	bl	8000300 <lcd_write_byte>
			lcd_write_byte((hwYpos>>8)&0xff,LCD_DATA);
 8000486:	88bb      	ldrh	r3, [r7, #4]
 8000488:	0a1b      	lsrs	r3, r3, #8
 800048a:	b29b      	uxth	r3, r3
 800048c:	b2db      	uxtb	r3, r3
 800048e:	2101      	movs	r1, #1
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff ff35 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(hwYpos&0xff,LCD_DATA);
 8000496:	88bb      	ldrh	r3, [r7, #4]
 8000498:	b2db      	uxtb	r3, r3
 800049a:	2101      	movs	r1, #1
 800049c:	4618      	mov	r0, r3
 800049e:	f7ff ff2f 	bl	8000300 <lcd_write_byte>
		}
		lcd_write_byte(0x2C, LCD_CMD);
 80004a2:	2100      	movs	r1, #0
 80004a4:	202c      	movs	r0, #44	; 0x2c
 80004a6:	f7ff ff2b 	bl	8000300 <lcd_write_byte>
			lcd_write_register(0x03, hwXpos & 0xFF); //Column Start
			lcd_write_register(0x06, hwYpos >> 8);
			lcd_write_register(0x07, hwYpos & 0xFF); //Row Start
			lcd_write_byte(0x22, LCD_CMD);
	}
}
 80004aa:	e03b      	b.n	8000524 <lcd_set_cursor+0x12c>
			lcd_write_register(0x02, hwXpos >> 8);
 80004ac:	88fb      	ldrh	r3, [r7, #6]
 80004ae:	0a1b      	lsrs	r3, r3, #8
 80004b0:	b29b      	uxth	r3, r3
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	4619      	mov	r1, r3
 80004b6:	2002      	movs	r0, #2
 80004b8:	f7ff ff88 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x03, hwXpos & 0xFF); //Column Start
 80004bc:	88fb      	ldrh	r3, [r7, #6]
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	4619      	mov	r1, r3
 80004c2:	2003      	movs	r0, #3
 80004c4:	f7ff ff82 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x06, hwYpos >> 8);
 80004c8:	88bb      	ldrh	r3, [r7, #4]
 80004ca:	0a1b      	lsrs	r3, r3, #8
 80004cc:	b29b      	uxth	r3, r3
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	4619      	mov	r1, r3
 80004d2:	2006      	movs	r0, #6
 80004d4:	f7ff ff7a 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x07, hwYpos & 0xFF); //Row Start
 80004d8:	88bb      	ldrh	r3, [r7, #4]
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	4619      	mov	r1, r3
 80004de:	2007      	movs	r0, #7
 80004e0:	f7ff ff74 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x02, hwXpos >> 8);
 80004e4:	88fb      	ldrh	r3, [r7, #6]
 80004e6:	0a1b      	lsrs	r3, r3, #8
 80004e8:	b29b      	uxth	r3, r3
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	4619      	mov	r1, r3
 80004ee:	2002      	movs	r0, #2
 80004f0:	f7ff ff6c 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x03, hwXpos & 0xFF); //Column Start
 80004f4:	88fb      	ldrh	r3, [r7, #6]
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	4619      	mov	r1, r3
 80004fa:	2003      	movs	r0, #3
 80004fc:	f7ff ff66 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x06, hwYpos >> 8);
 8000500:	88bb      	ldrh	r3, [r7, #4]
 8000502:	0a1b      	lsrs	r3, r3, #8
 8000504:	b29b      	uxth	r3, r3
 8000506:	b2db      	uxtb	r3, r3
 8000508:	4619      	mov	r1, r3
 800050a:	2006      	movs	r0, #6
 800050c:	f7ff ff5e 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x07, hwYpos & 0xFF); //Row Start
 8000510:	88bb      	ldrh	r3, [r7, #4]
 8000512:	b2db      	uxtb	r3, r3
 8000514:	4619      	mov	r1, r3
 8000516:	2007      	movs	r0, #7
 8000518:	f7ff ff58 	bl	80003cc <lcd_write_register>
			lcd_write_byte(0x22, LCD_CMD);
 800051c:	2100      	movs	r1, #0
 800051e:	2022      	movs	r0, #34	; 0x22
 8000520:	f7ff feee 	bl	8000300 <lcd_write_byte>
}
 8000524:	bf00      	nop
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	20000029 	.word	0x20000029
 8000530:	20000028 	.word	0x20000028

08000534 <lcd_clear_screen>:

//clear the lcd with the specified color.
void lcd_clear_screen(uint16_t hwColor)  
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	80fb      	strh	r3, [r7, #6]
	uint32_t i, wCount = LCD_WIDTH;
 800053e:	23f0      	movs	r3, #240	; 0xf0
 8000540:	613b      	str	r3, [r7, #16]
	uint8_t hval = hwColor >> 8;
 8000542:	88fb      	ldrh	r3, [r7, #6]
 8000544:	0a1b      	lsrs	r3, r3, #8
 8000546:	b29b      	uxth	r3, r3
 8000548:	b2db      	uxtb	r3, r3
 800054a:	73fb      	strb	r3, [r7, #15]
	uint8_t lval = hwColor & 0xFF;
 800054c:	88fb      	ldrh	r3, [r7, #6]
 800054e:	b2db      	uxtb	r3, r3
 8000550:	73bb      	strb	r3, [r7, #14]
	wCount *= LCD_HEIGHT;
 8000552:	693a      	ldr	r2, [r7, #16]
 8000554:	4613      	mov	r3, r2
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	4413      	add	r3, r2
 800055a:	019b      	lsls	r3, r3, #6
 800055c:	613b      	str	r3, [r7, #16]
	
	if(ST7789V == lcd_id){
 800055e:	4b34      	ldr	r3, [pc, #208]	; (8000630 <lcd_clear_screen+0xfc>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b52      	cmp	r3, #82	; 0x52
 8000564:	d12e      	bne.n	80005c4 <lcd_clear_screen+0x90>
		setRotation(_rotation);
 8000566:	4b33      	ldr	r3, [pc, #204]	; (8000634 <lcd_clear_screen+0x100>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	4618      	mov	r0, r3
 800056c:	f000 f918 	bl	80007a0 <setRotation>
		__LCD_DC_SET();
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000576:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057a:	f001 f965 	bl	8001848 <HAL_GPIO_WritePin>
		__LCD_CS_CLR();
 800057e:	2200      	movs	r2, #0
 8000580:	2140      	movs	r1, #64	; 0x40
 8000582:	482d      	ldr	r0, [pc, #180]	; (8000638 <lcd_clear_screen+0x104>)
 8000584:	f001 f960 	bl	8001848 <HAL_GPIO_WritePin>
		for (i = 0; i < wCount; i ++) {
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
 800058c:	e010      	b.n	80005b0 <lcd_clear_screen+0x7c>
			HAL_SPI_Transmit(&hspi1,&hval,1,0xff);
 800058e:	f107 010f 	add.w	r1, r7, #15
 8000592:	23ff      	movs	r3, #255	; 0xff
 8000594:	2201      	movs	r2, #1
 8000596:	4829      	ldr	r0, [pc, #164]	; (800063c <lcd_clear_screen+0x108>)
 8000598:	f002 fda3 	bl	80030e2 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi1,&lval,1,0xff);
 800059c:	f107 010e 	add.w	r1, r7, #14
 80005a0:	23ff      	movs	r3, #255	; 0xff
 80005a2:	2201      	movs	r2, #1
 80005a4:	4825      	ldr	r0, [pc, #148]	; (800063c <lcd_clear_screen+0x108>)
 80005a6:	f002 fd9c 	bl	80030e2 <HAL_SPI_Transmit>
		for (i = 0; i < wCount; i ++) {
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	3301      	adds	r3, #1
 80005ae:	617b      	str	r3, [r7, #20]
 80005b0:	697a      	ldr	r2, [r7, #20]
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d3ea      	bcc.n	800058e <lcd_clear_screen+0x5a>
		}
		__LCD_CS_SET();
 80005b8:	2201      	movs	r2, #1
 80005ba:	2140      	movs	r1, #64	; 0x40
 80005bc:	481e      	ldr	r0, [pc, #120]	; (8000638 <lcd_clear_screen+0x104>)
 80005be:	f001 f943 	bl	8001848 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi1,&hval,1,0xff);
			HAL_SPI_Transmit(&hspi1,&lval,1,0xff);
		}
		__LCD_CS_SET();
	}
}
 80005c2:	e030      	b.n	8000626 <lcd_clear_screen+0xf2>
		lcd_set_cursor(0, 0);
 80005c4:	2100      	movs	r1, #0
 80005c6:	2000      	movs	r0, #0
 80005c8:	f7ff ff16 	bl	80003f8 <lcd_set_cursor>
		lcd_write_byte(0x22, LCD_CMD);
 80005cc:	2100      	movs	r1, #0
 80005ce:	2022      	movs	r0, #34	; 0x22
 80005d0:	f7ff fe96 	bl	8000300 <lcd_write_byte>
		__LCD_DC_SET();
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005de:	f001 f933 	bl	8001848 <HAL_GPIO_WritePin>
		__LCD_CS_CLR();
 80005e2:	2200      	movs	r2, #0
 80005e4:	2140      	movs	r1, #64	; 0x40
 80005e6:	4814      	ldr	r0, [pc, #80]	; (8000638 <lcd_clear_screen+0x104>)
 80005e8:	f001 f92e 	bl	8001848 <HAL_GPIO_WritePin>
		for (i = 0; i < wCount; i ++) {
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
 80005f0:	e010      	b.n	8000614 <lcd_clear_screen+0xe0>
			HAL_SPI_Transmit(&hspi1,&hval,1,0xff);
 80005f2:	f107 010f 	add.w	r1, r7, #15
 80005f6:	23ff      	movs	r3, #255	; 0xff
 80005f8:	2201      	movs	r2, #1
 80005fa:	4810      	ldr	r0, [pc, #64]	; (800063c <lcd_clear_screen+0x108>)
 80005fc:	f002 fd71 	bl	80030e2 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi1,&lval,1,0xff);
 8000600:	f107 010e 	add.w	r1, r7, #14
 8000604:	23ff      	movs	r3, #255	; 0xff
 8000606:	2201      	movs	r2, #1
 8000608:	480c      	ldr	r0, [pc, #48]	; (800063c <lcd_clear_screen+0x108>)
 800060a:	f002 fd6a 	bl	80030e2 <HAL_SPI_Transmit>
		for (i = 0; i < wCount; i ++) {
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	3301      	adds	r3, #1
 8000612:	617b      	str	r3, [r7, #20]
 8000614:	697a      	ldr	r2, [r7, #20]
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	429a      	cmp	r2, r3
 800061a:	d3ea      	bcc.n	80005f2 <lcd_clear_screen+0xbe>
		__LCD_CS_SET();
 800061c:	2201      	movs	r2, #1
 800061e:	2140      	movs	r1, #64	; 0x40
 8000620:	4805      	ldr	r0, [pc, #20]	; (8000638 <lcd_clear_screen+0x104>)
 8000622:	f001 f911 	bl	8001848 <HAL_GPIO_WritePin>
}
 8000626:	bf00      	nop
 8000628:	3718      	adds	r7, #24
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000029 	.word	0x20000029
 8000634:	20000028 	.word	0x20000028
 8000638:	48000400 	.word	0x48000400
 800063c:	2000002c 	.word	0x2000002c

08000640 <lcd_draw_point>:
//draw a point on the lcd with the specified color.
//hwXpos specify x position.
//hwYpos specify y position.
//hwColor color of the point.
void lcd_draw_point(uint16_t hwXpos, uint16_t hwYpos, uint16_t hwColor) 
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	80fb      	strh	r3, [r7, #6]
 800064a:	460b      	mov	r3, r1
 800064c:	80bb      	strh	r3, [r7, #4]
 800064e:	4613      	mov	r3, r2
 8000650:	807b      	strh	r3, [r7, #2]
	if(ST7789V == lcd_id){
 8000652:	4b12      	ldr	r3, [pc, #72]	; (800069c <lcd_draw_point+0x5c>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b52      	cmp	r3, #82	; 0x52
 8000658:	d10e      	bne.n	8000678 <lcd_draw_point+0x38>
		lcd_set_cursor(hwXpos, hwYpos);
 800065a:	88ba      	ldrh	r2, [r7, #4]
 800065c:	88fb      	ldrh	r3, [r7, #6]
 800065e:	4611      	mov	r1, r2
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff fec9 	bl	80003f8 <lcd_set_cursor>
		lcd_write_byte(0x2C, LCD_CMD);
 8000666:	2100      	movs	r1, #0
 8000668:	202c      	movs	r0, #44	; 0x2c
 800066a:	f7ff fe49 	bl	8000300 <lcd_write_byte>
		lcd_write_word(hwColor);
 800066e:	887b      	ldrh	r3, [r7, #2]
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff fe77 	bl	8000364 <lcd_write_word>
	}else{
		lcd_set_cursor(hwXpos, hwYpos);
		lcd_write_byte(0x22, LCD_CMD);
		lcd_write_word(hwColor);
	}
}
 8000676:	e00d      	b.n	8000694 <lcd_draw_point+0x54>
		lcd_set_cursor(hwXpos, hwYpos);
 8000678:	88ba      	ldrh	r2, [r7, #4]
 800067a:	88fb      	ldrh	r3, [r7, #6]
 800067c:	4611      	mov	r1, r2
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff feba 	bl	80003f8 <lcd_set_cursor>
		lcd_write_byte(0x22, LCD_CMD);
 8000684:	2100      	movs	r1, #0
 8000686:	2022      	movs	r0, #34	; 0x22
 8000688:	f7ff fe3a 	bl	8000300 <lcd_write_byte>
		lcd_write_word(hwColor);
 800068c:	887b      	ldrh	r3, [r7, #2]
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff fe68 	bl	8000364 <lcd_write_word>
}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000029 	.word	0x20000029

080006a0 <lcd_draw_circle>:
//draw a circle at the specified position on lcd.
void lcd_draw_circle(		uint16_t hwXpos,  //specify x position.
                        uint16_t hwYpos,  //specify y position.
                        uint16_t hwRadius, //specify the radius of the circle.
                        uint16_t hwColor)  //specify the color of the circle.
{
 80006a0:	b590      	push	{r4, r7, lr}
 80006a2:	b087      	sub	sp, #28
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4604      	mov	r4, r0
 80006a8:	4608      	mov	r0, r1
 80006aa:	4611      	mov	r1, r2
 80006ac:	461a      	mov	r2, r3
 80006ae:	4623      	mov	r3, r4
 80006b0:	80fb      	strh	r3, [r7, #6]
 80006b2:	4603      	mov	r3, r0
 80006b4:	80bb      	strh	r3, [r7, #4]
 80006b6:	460b      	mov	r3, r1
 80006b8:	807b      	strh	r3, [r7, #2]
 80006ba:	4613      	mov	r3, r2
 80006bc:	803b      	strh	r3, [r7, #0]
		int x = -hwRadius, y = 0, err = 2 - 2 * hwRadius, e2;
 80006be:	887b      	ldrh	r3, [r7, #2]
 80006c0:	425b      	negs	r3, r3
 80006c2:	617b      	str	r3, [r7, #20]
 80006c4:	2300      	movs	r3, #0
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	887b      	ldrh	r3, [r7, #2]
 80006ca:	f1c3 0301 	rsb	r3, r3, #1
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	60fb      	str	r3, [r7, #12]
	
    do {
        lcd_draw_point(hwXpos - x, hwYpos + y, hwColor);
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	88fa      	ldrh	r2, [r7, #6]
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	b298      	uxth	r0, r3
 80006dc:	693b      	ldr	r3, [r7, #16]
 80006de:	b29a      	uxth	r2, r3
 80006e0:	88bb      	ldrh	r3, [r7, #4]
 80006e2:	4413      	add	r3, r2
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	883a      	ldrh	r2, [r7, #0]
 80006e8:	4619      	mov	r1, r3
 80006ea:	f7ff ffa9 	bl	8000640 <lcd_draw_point>
        lcd_draw_point(hwXpos + x, hwYpos + y, hwColor);
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	88fb      	ldrh	r3, [r7, #6]
 80006f4:	4413      	add	r3, r2
 80006f6:	b298      	uxth	r0, r3
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	88bb      	ldrh	r3, [r7, #4]
 80006fe:	4413      	add	r3, r2
 8000700:	b29b      	uxth	r3, r3
 8000702:	883a      	ldrh	r2, [r7, #0]
 8000704:	4619      	mov	r1, r3
 8000706:	f7ff ff9b 	bl	8000640 <lcd_draw_point>
        lcd_draw_point(hwXpos + x, hwYpos - y, hwColor);
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	b29a      	uxth	r2, r3
 800070e:	88fb      	ldrh	r3, [r7, #6]
 8000710:	4413      	add	r3, r2
 8000712:	b298      	uxth	r0, r3
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	b29b      	uxth	r3, r3
 8000718:	88ba      	ldrh	r2, [r7, #4]
 800071a:	1ad3      	subs	r3, r2, r3
 800071c:	b29b      	uxth	r3, r3
 800071e:	883a      	ldrh	r2, [r7, #0]
 8000720:	4619      	mov	r1, r3
 8000722:	f7ff ff8d 	bl	8000640 <lcd_draw_point>
        lcd_draw_point(hwXpos - x, hwYpos - y, hwColor);
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	b29b      	uxth	r3, r3
 800072a:	88fa      	ldrh	r2, [r7, #6]
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	b298      	uxth	r0, r3
 8000730:	693b      	ldr	r3, [r7, #16]
 8000732:	b29b      	uxth	r3, r3
 8000734:	88ba      	ldrh	r2, [r7, #4]
 8000736:	1ad3      	subs	r3, r2, r3
 8000738:	b29b      	uxth	r3, r3
 800073a:	883a      	ldrh	r2, [r7, #0]
 800073c:	4619      	mov	r1, r3
 800073e:	f7ff ff7f 	bl	8000640 <lcd_draw_point>
        e2 = err;
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 8000746:	68ba      	ldr	r2, [r7, #8]
 8000748:	693b      	ldr	r3, [r7, #16]
 800074a:	429a      	cmp	r2, r3
 800074c:	dc13      	bgt.n	8000776 <lcd_draw_circle+0xd6>
            err += ++ y * 2 + 1;
 800074e:	693b      	ldr	r3, [r7, #16]
 8000750:	3301      	adds	r3, #1
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	3301      	adds	r3, #1
 800075a:	68fa      	ldr	r2, [r7, #12]
 800075c:	4413      	add	r3, r2
 800075e:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) e2 = 0;
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	425b      	negs	r3, r3
 8000764:	693a      	ldr	r2, [r7, #16]
 8000766:	429a      	cmp	r2, r3
 8000768:	d105      	bne.n	8000776 <lcd_draw_circle+0xd6>
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	429a      	cmp	r2, r3
 8000770:	dc01      	bgt.n	8000776 <lcd_draw_circle+0xd6>
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
        }
        if(e2 > x) err += ++ x * 2 + 1;
 8000776:	68ba      	ldr	r2, [r7, #8]
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	429a      	cmp	r2, r3
 800077c:	dd08      	ble.n	8000790 <lcd_draw_circle+0xf0>
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	3301      	adds	r3, #1
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	005b      	lsls	r3, r3, #1
 8000788:	3301      	adds	r3, #1
 800078a:	68fa      	ldr	r2, [r7, #12]
 800078c:	4413      	add	r3, r2
 800078e:	60fb      	str	r3, [r7, #12]
    } while(x <= 0);
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	2b00      	cmp	r3, #0
 8000794:	dd9d      	ble.n	80006d2 <lcd_draw_circle+0x32>
}
 8000796:	bf00      	nop
 8000798:	bf00      	nop
 800079a:	371c      	adds	r7, #28
 800079c:	46bd      	mov	sp, r7
 800079e:	bd90      	pop	{r4, r7, pc}

080007a0 <setRotation>:
	lcd_draw_v_line(hwXpos + hwWidth, hwYpos, hwHeight + 1, hwColor);
}


void setRotation(uint8_t rotation)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
	_rotation = rotation;
 80007aa:	4a71      	ldr	r2, [pc, #452]	; (8000970 <setRotation+0x1d0>)
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	7013      	strb	r3, [r2, #0]
	if(ST7789V == lcd_id){
 80007b0:	4b70      	ldr	r3, [pc, #448]	; (8000974 <setRotation+0x1d4>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b52      	cmp	r3, #82	; 0x52
 80007b6:	f040 80d6 	bne.w	8000966 <setRotation+0x1c6>
		//switch(_rotation){
		switch(_rotation){
 80007ba:	4b6d      	ldr	r3, [pc, #436]	; (8000970 <setRotation+0x1d0>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b03      	cmp	r3, #3
 80007c0:	f200 80d0 	bhi.w	8000964 <setRotation+0x1c4>
 80007c4:	a201      	add	r2, pc, #4	; (adr r2, 80007cc <setRotation+0x2c>)
 80007c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ca:	bf00      	nop
 80007cc:	080007dd 	.word	0x080007dd
 80007d0:	0800083f 	.word	0x0800083f
 80007d4:	080008a1 	.word	0x080008a1
 80007d8:	08000903 	.word	0x08000903

			case 0:
			 /* Memory access control: MY = 0, MX = 0, MV = 0, ML = 0 */
			 /*  */
				lcd_write_register(0X36, 0x00);
 80007dc:	2100      	movs	r1, #0
 80007de:	2036      	movs	r0, #54	; 0x36
 80007e0:	f7ff fdf4 	bl	80003cc <lcd_write_register>
				lcd_write_byte(0x2A,LCD_CMD);
 80007e4:	2100      	movs	r1, #0
 80007e6:	202a      	movs	r0, #42	; 0x2a
 80007e8:	f7ff fd8a 	bl	8000300 <lcd_write_byte>
				lcd_write_byte(0x00,LCD_DATA);
 80007ec:	2101      	movs	r1, #1
 80007ee:	2000      	movs	r0, #0
 80007f0:	f7ff fd86 	bl	8000300 <lcd_write_byte>
				lcd_write_byte(0x00,LCD_DATA);
 80007f4:	2101      	movs	r1, #1
 80007f6:	2000      	movs	r0, #0
 80007f8:	f7ff fd82 	bl	8000300 <lcd_write_byte>
				lcd_write_byte(0x00,LCD_DATA);
 80007fc:	2101      	movs	r1, #1
 80007fe:	2000      	movs	r0, #0
 8000800:	f7ff fd7e 	bl	8000300 <lcd_write_byte>
				lcd_write_byte((LCD_WIDTH-1)&0xff,LCD_DATA);
 8000804:	2101      	movs	r1, #1
 8000806:	20ef      	movs	r0, #239	; 0xef
 8000808:	f7ff fd7a 	bl	8000300 <lcd_write_byte>
				lcd_write_byte(0x2B,LCD_CMD);
 800080c:	2100      	movs	r1, #0
 800080e:	202b      	movs	r0, #43	; 0x2b
 8000810:	f7ff fd76 	bl	8000300 <lcd_write_byte>
				lcd_write_byte(0x00,LCD_DATA);
 8000814:	2101      	movs	r1, #1
 8000816:	2000      	movs	r0, #0
 8000818:	f7ff fd72 	bl	8000300 <lcd_write_byte>
				lcd_write_byte(0x00,LCD_DATA);
 800081c:	2101      	movs	r1, #1
 800081e:	2000      	movs	r0, #0
 8000820:	f7ff fd6e 	bl	8000300 <lcd_write_byte>
				lcd_write_byte(((LCD_HEIGHT-1)>>8)&0xff,LCD_DATA);
 8000824:	2101      	movs	r1, #1
 8000826:	2001      	movs	r0, #1
 8000828:	f7ff fd6a 	bl	8000300 <lcd_write_byte>
				lcd_write_byte((LCD_HEIGHT-1)&0xff,LCD_DATA);
 800082c:	2101      	movs	r1, #1
 800082e:	203f      	movs	r0, #63	; 0x3f
 8000830:	f7ff fd66 	bl	8000300 <lcd_write_byte>
				lcd_write_byte(0x2C,LCD_CMD);
 8000834:	2100      	movs	r1, #0
 8000836:	202c      	movs	r0, #44	; 0x2c
 8000838:	f7ff fd62 	bl	8000300 <lcd_write_byte>
				break;
 800083c:	e093      	b.n	8000966 <setRotation+0x1c6>

			case 1:
			 /* Memory access control: MY = 0, MX = 1, MV = 1, ML = 0 */
			 lcd_write_register(0X36, 0x60);
 800083e:	2160      	movs	r1, #96	; 0x60
 8000840:	2036      	movs	r0, #54	; 0x36
 8000842:	f7ff fdc3 	bl	80003cc <lcd_write_register>
				lcd_write_byte(0x2A,LCD_CMD);
 8000846:	2100      	movs	r1, #0
 8000848:	202a      	movs	r0, #42	; 0x2a
 800084a:	f7ff fd59 	bl	8000300 <lcd_write_byte>
				lcd_write_byte(0x00,LCD_DATA);
 800084e:	2101      	movs	r1, #1
 8000850:	2000      	movs	r0, #0
 8000852:	f7ff fd55 	bl	8000300 <lcd_write_byte>
				lcd_write_byte(0x00,LCD_DATA);
 8000856:	2101      	movs	r1, #1
 8000858:	2000      	movs	r0, #0
 800085a:	f7ff fd51 	bl	8000300 <lcd_write_byte>
				lcd_write_byte(((LCD_HEIGHT-1)>>8)&0xff,LCD_DATA);
 800085e:	2101      	movs	r1, #1
 8000860:	2001      	movs	r0, #1
 8000862:	f7ff fd4d 	bl	8000300 <lcd_write_byte>
				lcd_write_byte((LCD_HEIGHT-1)&0xff,LCD_DATA);
 8000866:	2101      	movs	r1, #1
 8000868:	203f      	movs	r0, #63	; 0x3f
 800086a:	f7ff fd49 	bl	8000300 <lcd_write_byte>
				lcd_write_byte(0x2B,LCD_CMD);
 800086e:	2100      	movs	r1, #0
 8000870:	202b      	movs	r0, #43	; 0x2b
 8000872:	f7ff fd45 	bl	8000300 <lcd_write_byte>
				lcd_write_byte(0x00,LCD_DATA);
 8000876:	2101      	movs	r1, #1
 8000878:	2000      	movs	r0, #0
 800087a:	f7ff fd41 	bl	8000300 <lcd_write_byte>
				lcd_write_byte(0x00,LCD_DATA);
 800087e:	2101      	movs	r1, #1
 8000880:	2000      	movs	r0, #0
 8000882:	f7ff fd3d 	bl	8000300 <lcd_write_byte>
				lcd_write_byte(0x00,LCD_DATA);
 8000886:	2101      	movs	r1, #1
 8000888:	2000      	movs	r0, #0
 800088a:	f7ff fd39 	bl	8000300 <lcd_write_byte>
				lcd_write_byte((LCD_WIDTH-1)&0xff,LCD_DATA);	
 800088e:	2101      	movs	r1, #1
 8000890:	20ef      	movs	r0, #239	; 0xef
 8000892:	f7ff fd35 	bl	8000300 <lcd_write_byte>
				lcd_write_byte(0x2C,LCD_CMD);
 8000896:	2100      	movs	r1, #0
 8000898:	202c      	movs	r0, #44	; 0x2c
 800089a:	f7ff fd31 	bl	8000300 <lcd_write_byte>
				break;
 800089e:	e062      	b.n	8000966 <setRotation+0x1c6>

			case 2:
			 /* Memory access control: MY = 1, MX = 1, MV = 0, ML = 0 */
			 lcd_write_register(0X36, 0xC0);
 80008a0:	21c0      	movs	r1, #192	; 0xc0
 80008a2:	2036      	movs	r0, #54	; 0x36
 80008a4:	f7ff fd92 	bl	80003cc <lcd_write_register>
				lcd_write_byte(0x2A,LCD_CMD);
 80008a8:	2100      	movs	r1, #0
 80008aa:	202a      	movs	r0, #42	; 0x2a
 80008ac:	f7ff fd28 	bl	8000300 <lcd_write_byte>
				lcd_write_byte(0x00,LCD_DATA);
 80008b0:	2101      	movs	r1, #1
 80008b2:	2000      	movs	r0, #0
 80008b4:	f7ff fd24 	bl	8000300 <lcd_write_byte>
				lcd_write_byte(0x00,LCD_DATA);
 80008b8:	2101      	movs	r1, #1
 80008ba:	2000      	movs	r0, #0
 80008bc:	f7ff fd20 	bl	8000300 <lcd_write_byte>
				lcd_write_byte(0x00,LCD_DATA);
 80008c0:	2101      	movs	r1, #1
 80008c2:	2000      	movs	r0, #0
 80008c4:	f7ff fd1c 	bl	8000300 <lcd_write_byte>
				lcd_write_byte((LCD_WIDTH-1)&0xff,LCD_DATA);
 80008c8:	2101      	movs	r1, #1
 80008ca:	20ef      	movs	r0, #239	; 0xef
 80008cc:	f7ff fd18 	bl	8000300 <lcd_write_byte>
				lcd_write_byte(0x2B,LCD_CMD);
 80008d0:	2100      	movs	r1, #0
 80008d2:	202b      	movs	r0, #43	; 0x2b
 80008d4:	f7ff fd14 	bl	8000300 <lcd_write_byte>
				lcd_write_byte(0x00,LCD_DATA);
 80008d8:	2101      	movs	r1, #1
 80008da:	2000      	movs	r0, #0
 80008dc:	f7ff fd10 	bl	8000300 <lcd_write_byte>
				lcd_write_byte(0x00,LCD_DATA);
 80008e0:	2101      	movs	r1, #1
 80008e2:	2000      	movs	r0, #0
 80008e4:	f7ff fd0c 	bl	8000300 <lcd_write_byte>
				lcd_write_byte(((LCD_HEIGHT-1)>>8)&0xff,LCD_DATA);
 80008e8:	2101      	movs	r1, #1
 80008ea:	2001      	movs	r0, #1
 80008ec:	f7ff fd08 	bl	8000300 <lcd_write_byte>
				lcd_write_byte((LCD_HEIGHT-1)&0xff,LCD_DATA);
 80008f0:	2101      	movs	r1, #1
 80008f2:	203f      	movs	r0, #63	; 0x3f
 80008f4:	f7ff fd04 	bl	8000300 <lcd_write_byte>
				lcd_write_byte(0x2C,LCD_CMD);
 80008f8:	2100      	movs	r1, #0
 80008fa:	202c      	movs	r0, #44	; 0x2c
 80008fc:	f7ff fd00 	bl	8000300 <lcd_write_byte>
				break;
 8000900:	e031      	b.n	8000966 <setRotation+0x1c6>

			case 3:
			 /* Memory access control: MY = 1, MX = 0, MV = 1, ML = 0 */
			 lcd_write_register(0X36, 0xA0);
 8000902:	21a0      	movs	r1, #160	; 0xa0
 8000904:	2036      	movs	r0, #54	; 0x36
 8000906:	f7ff fd61 	bl	80003cc <lcd_write_register>
			
				lcd_write_byte(0x2A,LCD_CMD);
 800090a:	2100      	movs	r1, #0
 800090c:	202a      	movs	r0, #42	; 0x2a
 800090e:	f7ff fcf7 	bl	8000300 <lcd_write_byte>
				lcd_write_byte(0x00,LCD_DATA);
 8000912:	2101      	movs	r1, #1
 8000914:	2000      	movs	r0, #0
 8000916:	f7ff fcf3 	bl	8000300 <lcd_write_byte>
				lcd_write_byte(0x00,LCD_DATA);
 800091a:	2101      	movs	r1, #1
 800091c:	2000      	movs	r0, #0
 800091e:	f7ff fcef 	bl	8000300 <lcd_write_byte>
				lcd_write_byte(((LCD_HEIGHT-1)>>8)&0xff,LCD_DATA);
 8000922:	2101      	movs	r1, #1
 8000924:	2001      	movs	r0, #1
 8000926:	f7ff fceb 	bl	8000300 <lcd_write_byte>
				lcd_write_byte((LCD_HEIGHT-1)&0xff,LCD_DATA);
 800092a:	2101      	movs	r1, #1
 800092c:	203f      	movs	r0, #63	; 0x3f
 800092e:	f7ff fce7 	bl	8000300 <lcd_write_byte>

				lcd_write_byte(0x2B,LCD_CMD);
 8000932:	2100      	movs	r1, #0
 8000934:	202b      	movs	r0, #43	; 0x2b
 8000936:	f7ff fce3 	bl	8000300 <lcd_write_byte>
				lcd_write_byte(0x00,LCD_DATA);
 800093a:	2101      	movs	r1, #1
 800093c:	2000      	movs	r0, #0
 800093e:	f7ff fcdf 	bl	8000300 <lcd_write_byte>
				lcd_write_byte(0x00,LCD_DATA);
 8000942:	2101      	movs	r1, #1
 8000944:	2000      	movs	r0, #0
 8000946:	f7ff fcdb 	bl	8000300 <lcd_write_byte>
				lcd_write_byte(0x00,LCD_DATA);
 800094a:	2101      	movs	r1, #1
 800094c:	2000      	movs	r0, #0
 800094e:	f7ff fcd7 	bl	8000300 <lcd_write_byte>
				lcd_write_byte((LCD_WIDTH-1)&0xff,LCD_DATA);
 8000952:	2101      	movs	r1, #1
 8000954:	20ef      	movs	r0, #239	; 0xef
 8000956:	f7ff fcd3 	bl	8000300 <lcd_write_byte>
				lcd_write_byte(0x2C,LCD_CMD);
 800095a:	2100      	movs	r1, #0
 800095c:	202c      	movs	r0, #44	; 0x2c
 800095e:	f7ff fccf 	bl	8000300 <lcd_write_byte>
				break;
 8000962:	e000      	b.n	8000966 <setRotation+0x1c6>
				
				default:
				break;
 8000964:	bf00      	nop
		 }
	}else{
		//HX8347 ROTATION SET
	} 
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000028 	.word	0x20000028
 8000974:	20000029 	.word	0x20000029

08000978 <lcd_init>:


//initialize the lcd.
void lcd_init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
		__LCD_CS_SET();		// Comm ML
 800097c:	2201      	movs	r2, #1
 800097e:	2140      	movs	r1, #64	; 0x40
 8000980:	48f1      	ldr	r0, [pc, #964]	; (8000d48 <lcd_init+0x3d0>)
 8000982:	f000 ff61 	bl	8001848 <HAL_GPIO_WritePin>
		__LCD_BKL_SET();	// Comm ML
 8000986:	2201      	movs	r2, #1
 8000988:	2180      	movs	r1, #128	; 0x80
 800098a:	48f0      	ldr	r0, [pc, #960]	; (8000d4c <lcd_init+0x3d4>)
 800098c:	f000 ff5c 	bl	8001848 <HAL_GPIO_WritePin>
		
		lcd_id = lcd_read_id();
 8000990:	f000 f9e0 	bl	8000d54 <lcd_read_id>
 8000994:	4603      	mov	r3, r0
 8000996:	461a      	mov	r2, r3
 8000998:	4bed      	ldr	r3, [pc, #948]	; (8000d50 <lcd_init+0x3d8>)
 800099a:	701a      	strb	r2, [r3, #0]
		//HAL_UART_Transmit(&huart2, &lcd_id, 1, 1000);
		lcd_id = lcd_read_id();
 800099c:	f000 f9da 	bl	8000d54 <lcd_read_id>
 80009a0:	4603      	mov	r3, r0
 80009a2:	461a      	mov	r2, r3
 80009a4:	4bea      	ldr	r3, [pc, #936]	; (8000d50 <lcd_init+0x3d8>)
 80009a6:	701a      	strb	r2, [r3, #0]
		//HAL_UART_Transmit(&huart2, &lcd_id, 1, 1000);

		if(ST7789V == lcd_id){
 80009a8:	4be9      	ldr	r3, [pc, #932]	; (8000d50 <lcd_init+0x3d8>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b52      	cmp	r3, #82	; 0x52
 80009ae:	f040 80d0 	bne.w	8000b52 <lcd_init+0x1da>
			lcd_write_byte(0x11,LCD_CMD);
 80009b2:	2100      	movs	r1, #0
 80009b4:	2011      	movs	r0, #17
 80009b6:	f7ff fca3 	bl	8000300 <lcd_write_byte>
			HAL_Delay(100);
 80009ba:	2064      	movs	r0, #100	; 0x64
 80009bc:	f000 fcb0 	bl	8001320 <HAL_Delay>
			lcd_write_register(0x36,0x00);
 80009c0:	2100      	movs	r1, #0
 80009c2:	2036      	movs	r0, #54	; 0x36
 80009c4:	f7ff fd02 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x3a,0x55);
 80009c8:	2155      	movs	r1, #85	; 0x55
 80009ca:	203a      	movs	r0, #58	; 0x3a
 80009cc:	f7ff fcfe 	bl	80003cc <lcd_write_register>
			lcd_write_byte(0xb2,LCD_CMD);
 80009d0:	2100      	movs	r1, #0
 80009d2:	20b2      	movs	r0, #178	; 0xb2
 80009d4:	f7ff fc94 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x0c,LCD_DATA);
 80009d8:	2101      	movs	r1, #1
 80009da:	200c      	movs	r0, #12
 80009dc:	f7ff fc90 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x0c,LCD_DATA);
 80009e0:	2101      	movs	r1, #1
 80009e2:	200c      	movs	r0, #12
 80009e4:	f7ff fc8c 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x00,LCD_DATA);
 80009e8:	2101      	movs	r1, #1
 80009ea:	2000      	movs	r0, #0
 80009ec:	f7ff fc88 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x33,LCD_DATA);
 80009f0:	2101      	movs	r1, #1
 80009f2:	2033      	movs	r0, #51	; 0x33
 80009f4:	f7ff fc84 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x33,LCD_DATA);
 80009f8:	2101      	movs	r1, #1
 80009fa:	2033      	movs	r0, #51	; 0x33
 80009fc:	f7ff fc80 	bl	8000300 <lcd_write_byte>
			lcd_write_register(0xb7,0x35);
 8000a00:	2135      	movs	r1, #53	; 0x35
 8000a02:	20b7      	movs	r0, #183	; 0xb7
 8000a04:	f7ff fce2 	bl	80003cc <lcd_write_register>
			lcd_write_register(0xbb,0x28);
 8000a08:	2128      	movs	r1, #40	; 0x28
 8000a0a:	20bb      	movs	r0, #187	; 0xbb
 8000a0c:	f7ff fcde 	bl	80003cc <lcd_write_register>
			lcd_write_register(0xc0,0x3c);
 8000a10:	213c      	movs	r1, #60	; 0x3c
 8000a12:	20c0      	movs	r0, #192	; 0xc0
 8000a14:	f7ff fcda 	bl	80003cc <lcd_write_register>
			lcd_write_register(0xc2,0x01);
 8000a18:	2101      	movs	r1, #1
 8000a1a:	20c2      	movs	r0, #194	; 0xc2
 8000a1c:	f7ff fcd6 	bl	80003cc <lcd_write_register>
			lcd_write_register(0xc3,0x0b);
 8000a20:	210b      	movs	r1, #11
 8000a22:	20c3      	movs	r0, #195	; 0xc3
 8000a24:	f7ff fcd2 	bl	80003cc <lcd_write_register>
			lcd_write_register(0xc4,0x20);
 8000a28:	2120      	movs	r1, #32
 8000a2a:	20c4      	movs	r0, #196	; 0xc4
 8000a2c:	f7ff fcce 	bl	80003cc <lcd_write_register>
			lcd_write_register(0xc6,0x0f);
 8000a30:	210f      	movs	r1, #15
 8000a32:	20c6      	movs	r0, #198	; 0xc6
 8000a34:	f7ff fcca 	bl	80003cc <lcd_write_register>
			lcd_write_byte(0xD0,LCD_CMD);
 8000a38:	2100      	movs	r1, #0
 8000a3a:	20d0      	movs	r0, #208	; 0xd0
 8000a3c:	f7ff fc60 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0xa4,LCD_DATA);
 8000a40:	2101      	movs	r1, #1
 8000a42:	20a4      	movs	r0, #164	; 0xa4
 8000a44:	f7ff fc5c 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0xa1,LCD_DATA);
 8000a48:	2101      	movs	r1, #1
 8000a4a:	20a1      	movs	r0, #161	; 0xa1
 8000a4c:	f7ff fc58 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0xe0,LCD_CMD);
 8000a50:	2100      	movs	r1, #0
 8000a52:	20e0      	movs	r0, #224	; 0xe0
 8000a54:	f7ff fc54 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0xd0,LCD_DATA);
 8000a58:	2101      	movs	r1, #1
 8000a5a:	20d0      	movs	r0, #208	; 0xd0
 8000a5c:	f7ff fc50 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x01,LCD_DATA);
 8000a60:	2101      	movs	r1, #1
 8000a62:	2001      	movs	r0, #1
 8000a64:	f7ff fc4c 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x08,LCD_DATA);
 8000a68:	2101      	movs	r1, #1
 8000a6a:	2008      	movs	r0, #8
 8000a6c:	f7ff fc48 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x0f,LCD_DATA);
 8000a70:	2101      	movs	r1, #1
 8000a72:	200f      	movs	r0, #15
 8000a74:	f7ff fc44 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x11,LCD_DATA);
 8000a78:	2101      	movs	r1, #1
 8000a7a:	2011      	movs	r0, #17
 8000a7c:	f7ff fc40 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x2a,LCD_DATA);
 8000a80:	2101      	movs	r1, #1
 8000a82:	202a      	movs	r0, #42	; 0x2a
 8000a84:	f7ff fc3c 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x36,LCD_DATA);
 8000a88:	2101      	movs	r1, #1
 8000a8a:	2036      	movs	r0, #54	; 0x36
 8000a8c:	f7ff fc38 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x55,LCD_DATA);
 8000a90:	2101      	movs	r1, #1
 8000a92:	2055      	movs	r0, #85	; 0x55
 8000a94:	f7ff fc34 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x44,LCD_DATA);
 8000a98:	2101      	movs	r1, #1
 8000a9a:	2044      	movs	r0, #68	; 0x44
 8000a9c:	f7ff fc30 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x3a,LCD_DATA);
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	203a      	movs	r0, #58	; 0x3a
 8000aa4:	f7ff fc2c 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x0b,LCD_DATA);
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	200b      	movs	r0, #11
 8000aac:	f7ff fc28 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x06,LCD_DATA);
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	2006      	movs	r0, #6
 8000ab4:	f7ff fc24 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x11,LCD_DATA);
 8000ab8:	2101      	movs	r1, #1
 8000aba:	2011      	movs	r0, #17
 8000abc:	f7ff fc20 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x20,LCD_DATA);
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	2020      	movs	r0, #32
 8000ac4:	f7ff fc1c 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0xe1,LCD_CMD);
 8000ac8:	2100      	movs	r1, #0
 8000aca:	20e1      	movs	r0, #225	; 0xe1
 8000acc:	f7ff fc18 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0xd0,LCD_DATA);
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	20d0      	movs	r0, #208	; 0xd0
 8000ad4:	f7ff fc14 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x02,LCD_DATA);
 8000ad8:	2101      	movs	r1, #1
 8000ada:	2002      	movs	r0, #2
 8000adc:	f7ff fc10 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x07,LCD_DATA);
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	2007      	movs	r0, #7
 8000ae4:	f7ff fc0c 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x0a,LCD_DATA);
 8000ae8:	2101      	movs	r1, #1
 8000aea:	200a      	movs	r0, #10
 8000aec:	f7ff fc08 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x0b,LCD_DATA);
 8000af0:	2101      	movs	r1, #1
 8000af2:	200b      	movs	r0, #11
 8000af4:	f7ff fc04 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x18,LCD_DATA);
 8000af8:	2101      	movs	r1, #1
 8000afa:	2018      	movs	r0, #24
 8000afc:	f7ff fc00 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x34,LCD_DATA);
 8000b00:	2101      	movs	r1, #1
 8000b02:	2034      	movs	r0, #52	; 0x34
 8000b04:	f7ff fbfc 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x43,LCD_DATA);
 8000b08:	2101      	movs	r1, #1
 8000b0a:	2043      	movs	r0, #67	; 0x43
 8000b0c:	f7ff fbf8 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x4a,LCD_DATA);
 8000b10:	2101      	movs	r1, #1
 8000b12:	204a      	movs	r0, #74	; 0x4a
 8000b14:	f7ff fbf4 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x2b,LCD_DATA);
 8000b18:	2101      	movs	r1, #1
 8000b1a:	202b      	movs	r0, #43	; 0x2b
 8000b1c:	f7ff fbf0 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x1b,LCD_DATA);
 8000b20:	2101      	movs	r1, #1
 8000b22:	201b      	movs	r0, #27
 8000b24:	f7ff fbec 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x1c,LCD_DATA);
 8000b28:	2101      	movs	r1, #1
 8000b2a:	201c      	movs	r0, #28
 8000b2c:	f7ff fbe8 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x22,LCD_DATA);
 8000b30:	2101      	movs	r1, #1
 8000b32:	2022      	movs	r0, #34	; 0x22
 8000b34:	f7ff fbe4 	bl	8000300 <lcd_write_byte>
			lcd_write_byte(0x1f,LCD_DATA);
 8000b38:	2101      	movs	r1, #1
 8000b3a:	201f      	movs	r0, #31
 8000b3c:	f7ff fbe0 	bl	8000300 <lcd_write_byte>
			lcd_write_register(0x55,0xB0);
 8000b40:	21b0      	movs	r1, #176	; 0xb0
 8000b42:	2055      	movs	r0, #85	; 0x55
 8000b44:	f7ff fc42 	bl	80003cc <lcd_write_register>
			lcd_write_byte(0x29,LCD_CMD);
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2029      	movs	r0, #41	; 0x29
 8000b4c:	f7ff fbd8 	bl	8000300 <lcd_write_byte>
 8000b50:	e0ef      	b.n	8000d32 <lcd_init+0x3ba>
		}else{
			lcd_write_register(0xEA,0x00);
 8000b52:	2100      	movs	r1, #0
 8000b54:	20ea      	movs	r0, #234	; 0xea
 8000b56:	f7ff fc39 	bl	80003cc <lcd_write_register>
			lcd_write_register(0xEB,0x20);
 8000b5a:	2120      	movs	r1, #32
 8000b5c:	20eb      	movs	r0, #235	; 0xeb
 8000b5e:	f7ff fc35 	bl	80003cc <lcd_write_register>
			lcd_write_register(0xEC,0x0C);
 8000b62:	210c      	movs	r1, #12
 8000b64:	20ec      	movs	r0, #236	; 0xec
 8000b66:	f7ff fc31 	bl	80003cc <lcd_write_register>
			lcd_write_register(0xED,0xC4);
 8000b6a:	21c4      	movs	r1, #196	; 0xc4
 8000b6c:	20ed      	movs	r0, #237	; 0xed
 8000b6e:	f7ff fc2d 	bl	80003cc <lcd_write_register>
			lcd_write_register(0xE8,0x38);
 8000b72:	2138      	movs	r1, #56	; 0x38
 8000b74:	20e8      	movs	r0, #232	; 0xe8
 8000b76:	f7ff fc29 	bl	80003cc <lcd_write_register>
			lcd_write_register(0xE9,0x10);
 8000b7a:	2110      	movs	r1, #16
 8000b7c:	20e9      	movs	r0, #233	; 0xe9
 8000b7e:	f7ff fc25 	bl	80003cc <lcd_write_register>
			lcd_write_register(0xF1,0x01);
 8000b82:	2101      	movs	r1, #1
 8000b84:	20f1      	movs	r0, #241	; 0xf1
 8000b86:	f7ff fc21 	bl	80003cc <lcd_write_register>
			lcd_write_register(0xF2,0x10);
 8000b8a:	2110      	movs	r1, #16
 8000b8c:	20f2      	movs	r0, #242	; 0xf2
 8000b8e:	f7ff fc1d 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x40,0x01); 
 8000b92:	2101      	movs	r1, #1
 8000b94:	2040      	movs	r0, #64	; 0x40
 8000b96:	f7ff fc19 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x41,0x00); 
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2041      	movs	r0, #65	; 0x41
 8000b9e:	f7ff fc15 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x42,0x00); 
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2042      	movs	r0, #66	; 0x42
 8000ba6:	f7ff fc11 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x43,0x10); 
 8000baa:	2110      	movs	r1, #16
 8000bac:	2043      	movs	r0, #67	; 0x43
 8000bae:	f7ff fc0d 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x44,0x0E); 
 8000bb2:	210e      	movs	r1, #14
 8000bb4:	2044      	movs	r0, #68	; 0x44
 8000bb6:	f7ff fc09 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x45,0x24); 
 8000bba:	2124      	movs	r1, #36	; 0x24
 8000bbc:	2045      	movs	r0, #69	; 0x45
 8000bbe:	f7ff fc05 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x46,0x04); 
 8000bc2:	2104      	movs	r1, #4
 8000bc4:	2046      	movs	r0, #70	; 0x46
 8000bc6:	f7ff fc01 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x47,0x50); 
 8000bca:	2150      	movs	r1, #80	; 0x50
 8000bcc:	2047      	movs	r0, #71	; 0x47
 8000bce:	f7ff fbfd 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x48,0x02); 
 8000bd2:	2102      	movs	r1, #2
 8000bd4:	2048      	movs	r0, #72	; 0x48
 8000bd6:	f7ff fbf9 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x49,0x13); 
 8000bda:	2113      	movs	r1, #19
 8000bdc:	2049      	movs	r0, #73	; 0x49
 8000bde:	f7ff fbf5 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x4A,0x19); 
 8000be2:	2119      	movs	r1, #25
 8000be4:	204a      	movs	r0, #74	; 0x4a
 8000be6:	f7ff fbf1 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x4B,0x19); 
 8000bea:	2119      	movs	r1, #25
 8000bec:	204b      	movs	r0, #75	; 0x4b
 8000bee:	f7ff fbed 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x4C,0x16); 
 8000bf2:	2116      	movs	r1, #22
 8000bf4:	204c      	movs	r0, #76	; 0x4c
 8000bf6:	f7ff fbe9 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x50,0x1B); 
 8000bfa:	211b      	movs	r1, #27
 8000bfc:	2050      	movs	r0, #80	; 0x50
 8000bfe:	f7ff fbe5 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x51,0x31); 
 8000c02:	2131      	movs	r1, #49	; 0x31
 8000c04:	2051      	movs	r0, #81	; 0x51
 8000c06:	f7ff fbe1 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x52,0x2F); 
 8000c0a:	212f      	movs	r1, #47	; 0x2f
 8000c0c:	2052      	movs	r0, #82	; 0x52
 8000c0e:	f7ff fbdd 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x53,0x3F); 
 8000c12:	213f      	movs	r1, #63	; 0x3f
 8000c14:	2053      	movs	r0, #83	; 0x53
 8000c16:	f7ff fbd9 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x54,0x3F); 
 8000c1a:	213f      	movs	r1, #63	; 0x3f
 8000c1c:	2054      	movs	r0, #84	; 0x54
 8000c1e:	f7ff fbd5 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x55,0x3E); 
 8000c22:	213e      	movs	r1, #62	; 0x3e
 8000c24:	2055      	movs	r0, #85	; 0x55
 8000c26:	f7ff fbd1 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x56,0x2F); 
 8000c2a:	212f      	movs	r1, #47	; 0x2f
 8000c2c:	2056      	movs	r0, #86	; 0x56
 8000c2e:	f7ff fbcd 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x57,0x7B); 
 8000c32:	217b      	movs	r1, #123	; 0x7b
 8000c34:	2057      	movs	r0, #87	; 0x57
 8000c36:	f7ff fbc9 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x58,0x09); 
 8000c3a:	2109      	movs	r1, #9
 8000c3c:	2058      	movs	r0, #88	; 0x58
 8000c3e:	f7ff fbc5 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x59,0x06); 
 8000c42:	2106      	movs	r1, #6
 8000c44:	2059      	movs	r0, #89	; 0x59
 8000c46:	f7ff fbc1 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x5A,0x06); 
 8000c4a:	2106      	movs	r1, #6
 8000c4c:	205a      	movs	r0, #90	; 0x5a
 8000c4e:	f7ff fbbd 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x5B,0x0C); 
 8000c52:	210c      	movs	r1, #12
 8000c54:	205b      	movs	r0, #91	; 0x5b
 8000c56:	f7ff fbb9 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x5C,0x1D); 
 8000c5a:	211d      	movs	r1, #29
 8000c5c:	205c      	movs	r0, #92	; 0x5c
 8000c5e:	f7ff fbb5 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x5D,0xCC); 
 8000c62:	21cc      	movs	r1, #204	; 0xcc
 8000c64:	205d      	movs	r0, #93	; 0x5d
 8000c66:	f7ff fbb1 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x1B,0x1B);
 8000c6a:	211b      	movs	r1, #27
 8000c6c:	201b      	movs	r0, #27
 8000c6e:	f7ff fbad 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x1A,0x01);
 8000c72:	2101      	movs	r1, #1
 8000c74:	201a      	movs	r0, #26
 8000c76:	f7ff fba9 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x24,0x2F);
 8000c7a:	212f      	movs	r1, #47	; 0x2f
 8000c7c:	2024      	movs	r0, #36	; 0x24
 8000c7e:	f7ff fba5 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x25,0x57);
 8000c82:	2157      	movs	r1, #87	; 0x57
 8000c84:	2025      	movs	r0, #37	; 0x25
 8000c86:	f7ff fba1 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x23,0x88);
 8000c8a:	2188      	movs	r1, #136	; 0x88
 8000c8c:	2023      	movs	r0, #35	; 0x23
 8000c8e:	f7ff fb9d 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x18,0x34);
 8000c92:	2134      	movs	r1, #52	; 0x34
 8000c94:	2018      	movs	r0, #24
 8000c96:	f7ff fb99 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x19,0x01);
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	2019      	movs	r0, #25
 8000c9e:	f7ff fb95 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x01,0x00);
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f7ff fb91 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x1F,0x88);
 8000caa:	2188      	movs	r1, #136	; 0x88
 8000cac:	201f      	movs	r0, #31
 8000cae:	f7ff fb8d 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x1F,0x80);
 8000cb2:	2180      	movs	r1, #128	; 0x80
 8000cb4:	201f      	movs	r0, #31
 8000cb6:	f7ff fb89 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x1F,0x90);
 8000cba:	2190      	movs	r1, #144	; 0x90
 8000cbc:	201f      	movs	r0, #31
 8000cbe:	f7ff fb85 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x1F,0xD0);
 8000cc2:	21d0      	movs	r1, #208	; 0xd0
 8000cc4:	201f      	movs	r0, #31
 8000cc6:	f7ff fb81 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x17,0x05); 
 8000cca:	2105      	movs	r1, #5
 8000ccc:	2017      	movs	r0, #23
 8000cce:	f7ff fb7d 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x36,0x02); 
 8000cd2:	2102      	movs	r1, #2
 8000cd4:	2036      	movs	r0, #54	; 0x36
 8000cd6:	f7ff fb79 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x28,0x38);
 8000cda:	2138      	movs	r1, #56	; 0x38
 8000cdc:	2028      	movs	r0, #40	; 0x28
 8000cde:	f7ff fb75 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x28,0x3F);
 8000ce2:	213f      	movs	r1, #63	; 0x3f
 8000ce4:	2028      	movs	r0, #40	; 0x28
 8000ce6:	f7ff fb71 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x16,0x18); 
 8000cea:	2118      	movs	r1, #24
 8000cec:	2016      	movs	r0, #22
 8000cee:	f7ff fb6d 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x02,0x00);
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	2002      	movs	r0, #2
 8000cf6:	f7ff fb69 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x03,0x00);
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f7ff fb65 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x04,0x00);
 8000d02:	2100      	movs	r1, #0
 8000d04:	2004      	movs	r0, #4
 8000d06:	f7ff fb61 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x05,0xEF);
 8000d0a:	21ef      	movs	r1, #239	; 0xef
 8000d0c:	2005      	movs	r0, #5
 8000d0e:	f7ff fb5d 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x06,0x00);
 8000d12:	2100      	movs	r1, #0
 8000d14:	2006      	movs	r0, #6
 8000d16:	f7ff fb59 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x07,0x00);
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	2007      	movs	r0, #7
 8000d1e:	f7ff fb55 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x08,0x01);
 8000d22:	2101      	movs	r1, #1
 8000d24:	2008      	movs	r0, #8
 8000d26:	f7ff fb51 	bl	80003cc <lcd_write_register>
			lcd_write_register(0x09,0x3F);
 8000d2a:	213f      	movs	r1, #63	; 0x3f
 8000d2c:	2009      	movs	r0, #9
 8000d2e:	f7ff fb4d 	bl	80003cc <lcd_write_register>
		}
    lcd_clear_screen(WHITE);
 8000d32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d36:	f7ff fbfd 	bl	8000534 <lcd_clear_screen>
    __LCD_BKL_SET();
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2180      	movs	r1, #128	; 0x80
 8000d3e:	4803      	ldr	r0, [pc, #12]	; (8000d4c <lcd_init+0x3d4>)
 8000d40:	f000 fd82 	bl	8001848 <HAL_GPIO_WritePin>
}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	48000400 	.word	0x48000400
 8000d4c:	48000800 	.word	0x48000800
 8000d50:	20000029 	.word	0x20000029

08000d54 <lcd_read_id>:

uint8_t lcd_read_id(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af02      	add	r7, sp, #8
	uint8_t reg = 0xDC;
 8000d5a:	23dc      	movs	r3, #220	; 0xdc
 8000d5c:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_val = 0x00;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	71bb      	strb	r3, [r7, #6]
	uint8_t rx_val;

	__LCD_CS_CLR();
 8000d62:	2200      	movs	r2, #0
 8000d64:	2140      	movs	r1, #64	; 0x40
 8000d66:	4811      	ldr	r0, [pc, #68]	; (8000dac <lcd_read_id+0x58>)
 8000d68:	f000 fd6e 	bl	8001848 <HAL_GPIO_WritePin>
	__LCD_DC_CLR();
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d76:	f000 fd67 	bl	8001848 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,&reg,1,0xff);
 8000d7a:	1df9      	adds	r1, r7, #7
 8000d7c:	23ff      	movs	r3, #255	; 0xff
 8000d7e:	2201      	movs	r2, #1
 8000d80:	480b      	ldr	r0, [pc, #44]	; (8000db0 <lcd_read_id+0x5c>)
 8000d82:	f002 f9ae 	bl	80030e2 <HAL_SPI_Transmit>
	HAL_SPI_TransmitReceive(&hspi1,&tx_val,&rx_val,1,0xff);
 8000d86:	1d7a      	adds	r2, r7, #5
 8000d88:	1db9      	adds	r1, r7, #6
 8000d8a:	23ff      	movs	r3, #255	; 0xff
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	2301      	movs	r3, #1
 8000d90:	4807      	ldr	r0, [pc, #28]	; (8000db0 <lcd_read_id+0x5c>)
 8000d92:	f002 fb14 	bl	80033be <HAL_SPI_TransmitReceive>
	__LCD_CS_SET();
 8000d96:	2201      	movs	r2, #1
 8000d98:	2140      	movs	r1, #64	; 0x40
 8000d9a:	4804      	ldr	r0, [pc, #16]	; (8000dac <lcd_read_id+0x58>)
 8000d9c:	f000 fd54 	bl	8001848 <HAL_GPIO_WritePin>

	//rx_val = 0x52;

	return rx_val;
 8000da0:	797b      	ldrb	r3, [r7, #5]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	48000400 	.word	0x48000400
 8000db0:	2000002c 	.word	0x2000002c

08000db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t temp_id=53;
 8000dba:	2335      	movs	r3, #53	; 0x35
 8000dbc:	75fb      	strb	r3, [r7, #23]
  uint8_t RotationCnt = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	75bb      	strb	r3, [r7, #22]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc2:	f000 fa47 	bl	8001254 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc6:	f000 f865 	bl	8000e94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dca:	f7ff fa03 	bl	80001d4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000dce:	f000 f8c5 	bl	8000f5c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000dd2:	f000 f9a3 	bl	800111c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8000dd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dda:	f000 faa1 	bl	8001320 <HAL_Delay>
  lcd_init();
 8000dde:	f7ff fdcb 	bl	8000978 <lcd_init>
  //HAL_Delay(1000);
  //HAL_UART_Transmit(&huart2, &temp_id, 1, 1000);
  //lcd_clear_screen(WHITE);
  //HAL_Delay(1000);
  /* USER CODE END 2 */
  int X_MAX = 240;
 8000de2:	23f0      	movs	r3, #240	; 0xf0
 8000de4:	613b      	str	r3, [r7, #16]
  int X_MIN = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
  int Y_MAX = 320;
 8000dea:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000dee:	60bb      	str	r3, [r7, #8]
  int Y_MIN = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	607b      	str	r3, [r7, #4]
  int x = 25;
 8000df4:	2319      	movs	r3, #25
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
  int y = 160;
 8000df8:	23a0      	movs	r3, #160	; 0xa0
 8000dfa:	623b      	str	r3, [r7, #32]

  int HOR_DIRECTION = 1;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	61fb      	str	r3, [r7, #28]
  int VER_DIRECTION = 1;
 8000e00:	2301      	movs	r3, #1
 8000e02:	61bb      	str	r3, [r7, #24]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HOR_DIRECTION == 1) {
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d103      	bne.n	8000e12 <main+0x5e>
		  x += 6;
 8000e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0c:	3306      	adds	r3, #6
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8000e10:	e002      	b.n	8000e18 <main+0x64>
	  } else {
		  x -= 6;
 8000e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e14:	3b06      	subs	r3, #6
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
	  }

	  if (VER_DIRECTION == 1) {
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d103      	bne.n	8000e26 <main+0x72>
	  	y += 8;
 8000e1e:	6a3b      	ldr	r3, [r7, #32]
 8000e20:	3308      	adds	r3, #8
 8000e22:	623b      	str	r3, [r7, #32]
 8000e24:	e002      	b.n	8000e2c <main+0x78>
	  } else {
	  	y -= 8;
 8000e26:	6a3b      	ldr	r3, [r7, #32]
 8000e28:	3b08      	subs	r3, #8
 8000e2a:	623b      	str	r3, [r7, #32]
	  }

	  lcd_draw_circle(x, y, 25, RED);
 8000e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2e:	b298      	uxth	r0, r3
 8000e30:	6a3b      	ldr	r3, [r7, #32]
 8000e32:	b299      	uxth	r1, r3
 8000e34:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000e38:	2219      	movs	r2, #25
 8000e3a:	f7ff fc31 	bl	80006a0 <lcd_draw_circle>
	  HAL_Delay(100);
 8000e3e:	2064      	movs	r0, #100	; 0x64
 8000e40:	f000 fa6e 	bl	8001320 <HAL_Delay>
	  lcd_draw_circle(x, y, 25, WHITE);
 8000e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e46:	b298      	uxth	r0, r3
 8000e48:	6a3b      	ldr	r3, [r7, #32]
 8000e4a:	b299      	uxth	r1, r3
 8000e4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e50:	2219      	movs	r2, #25
 8000e52:	f7ff fc25 	bl	80006a0 <lcd_draw_circle>

	  if (x > X_MAX - 25) {
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	3b18      	subs	r3, #24
 8000e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	db02      	blt.n	8000e66 <main+0xb2>
		  HOR_DIRECTION = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]
 8000e64:	e006      	b.n	8000e74 <main+0xc0>
	  } else if (x < X_MIN + 25) {
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	3318      	adds	r3, #24
 8000e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	dc01      	bgt.n	8000e74 <main+0xc0>
		  HOR_DIRECTION = 1;
 8000e70:	2301      	movs	r3, #1
 8000e72:	61fb      	str	r3, [r7, #28]
	  }

	  if (y > Y_MAX - 25) {
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	3b18      	subs	r3, #24
 8000e78:	6a3a      	ldr	r2, [r7, #32]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	db02      	blt.n	8000e84 <main+0xd0>
		  VER_DIRECTION = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61bb      	str	r3, [r7, #24]
 8000e82:	e7bf      	b.n	8000e04 <main+0x50>
	  } else if (y < Y_MIN + 25) {
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3318      	adds	r3, #24
 8000e88:	6a3a      	ldr	r2, [r7, #32]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	dcba      	bgt.n	8000e04 <main+0x50>
		  VER_DIRECTION = 1;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	61bb      	str	r3, [r7, #24]
	  if (HOR_DIRECTION == 1) {
 8000e92:	e7b7      	b.n	8000e04 <main+0x50>

08000e94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b0a6      	sub	sp, #152	; 0x98
 8000e98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e9e:	2228      	movs	r2, #40	; 0x28
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f003 f9aa 	bl	80041fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	2258      	movs	r2, #88	; 0x58
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f003 f99c 	bl	80041fc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ec8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ecc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ed8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000edc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ee0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ee4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 fce0 	bl	80018b8 <HAL_RCC_OscConfig>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000efe:	f000 f827 	bl	8000f50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f02:	230f      	movs	r3, #15
 8000f04:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f06:	2302      	movs	r3, #2
 8000f08:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f12:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f14:	2300      	movs	r3, #0
 8000f16:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f18:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f1c:	2102      	movs	r1, #2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f001 fbe0 	bl	80026e4 <HAL_RCC_ClockConfig>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f2a:	f000 f811 	bl	8000f50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f001 fe09 	bl	8002b50 <HAL_RCCEx_PeriphCLKConfig>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000f44:	f000 f804 	bl	8000f50 <Error_Handler>
  }
}
 8000f48:	bf00      	nop
 8000f4a:	3798      	adds	r7, #152	; 0x98
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f54:	b672      	cpsid	i
}
 8000f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <Error_Handler+0x8>
	...

08000f5c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f60:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <MX_SPI1_Init+0x74>)
 8000f62:	4a1c      	ldr	r2, [pc, #112]	; (8000fd4 <MX_SPI1_Init+0x78>)
 8000f64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f66:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <MX_SPI1_Init+0x74>)
 8000f68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f6e:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <MX_SPI1_Init+0x74>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <MX_SPI1_Init+0x74>)
 8000f76:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f7a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f7c:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <MX_SPI1_Init+0x74>)
 8000f7e:	2202      	movs	r2, #2
 8000f80:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f82:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <MX_SPI1_Init+0x74>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <MX_SPI1_Init+0x74>)
 8000f8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f8e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f90:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <MX_SPI1_Init+0x74>)
 8000f92:	2218      	movs	r2, #24
 8000f94:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <MX_SPI1_Init+0x74>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <MX_SPI1_Init+0x74>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <MX_SPI1_Init+0x74>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <MX_SPI1_Init+0x74>)
 8000faa:	2207      	movs	r2, #7
 8000fac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fae:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <MX_SPI1_Init+0x74>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <MX_SPI1_Init+0x74>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fba:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <MX_SPI1_Init+0x74>)
 8000fbc:	f001 ffe6 	bl	8002f8c <HAL_SPI_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000fc6:	f7ff ffc3 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	2000002c 	.word	0x2000002c
 8000fd4:	40013000 	.word	0x40013000

08000fd8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	; 0x28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a17      	ldr	r2, [pc, #92]	; (8001054 <HAL_SPI_MspInit+0x7c>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d128      	bne.n	800104c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ffa:	4b17      	ldr	r3, [pc, #92]	; (8001058 <HAL_SPI_MspInit+0x80>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	4a16      	ldr	r2, [pc, #88]	; (8001058 <HAL_SPI_MspInit+0x80>)
 8001000:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001004:	6193      	str	r3, [r2, #24]
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <HAL_SPI_MspInit+0x80>)
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <HAL_SPI_MspInit+0x80>)
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	4a10      	ldr	r2, [pc, #64]	; (8001058 <HAL_SPI_MspInit+0x80>)
 8001018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800101c:	6153      	str	r3, [r2, #20]
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_SPI_MspInit+0x80>)
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800102a:	23e0      	movs	r3, #224	; 0xe0
 800102c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001036:	2303      	movs	r3, #3
 8001038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800103a:	2305      	movs	r3, #5
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001048:	f000 fa74 	bl	8001534 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800104c:	bf00      	nop
 800104e:	3728      	adds	r7, #40	; 0x28
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40013000 	.word	0x40013000
 8001058:	40021000 	.word	0x40021000

0800105c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <HAL_MspInit+0x44>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	4a0e      	ldr	r2, [pc, #56]	; (80010a0 <HAL_MspInit+0x44>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6193      	str	r3, [r2, #24]
 800106e:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <HAL_MspInit+0x44>)
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <HAL_MspInit+0x44>)
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	4a08      	ldr	r2, [pc, #32]	; (80010a0 <HAL_MspInit+0x44>)
 8001080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001084:	61d3      	str	r3, [r2, #28]
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_MspInit+0x44>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108e:	603b      	str	r3, [r7, #0]
 8001090:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001092:	2007      	movs	r0, #7
 8001094:	f000 fa1a 	bl	80014cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40021000 	.word	0x40021000

080010a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <NMI_Handler+0x4>

080010aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ae:	e7fe      	b.n	80010ae <HardFault_Handler+0x4>

080010b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <MemManage_Handler+0x4>

080010b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <BusFault_Handler+0x4>

080010bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <UsageFault_Handler+0x4>

080010c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f0:	f000 f8f6 	bl	80012e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <SystemInit+0x20>)
 80010fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001102:	4a05      	ldr	r2, [pc, #20]	; (8001118 <SystemInit+0x20>)
 8001104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <MX_USART2_UART_Init+0x58>)
 8001122:	4a15      	ldr	r2, [pc, #84]	; (8001178 <MX_USART2_UART_Init+0x5c>)
 8001124:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001126:	4b13      	ldr	r3, [pc, #76]	; (8001174 <MX_USART2_UART_Init+0x58>)
 8001128:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800112c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <MX_USART2_UART_Init+0x58>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001134:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <MX_USART2_UART_Init+0x58>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <MX_USART2_UART_Init+0x58>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <MX_USART2_UART_Init+0x58>)
 8001142:	220c      	movs	r2, #12
 8001144:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <MX_USART2_UART_Init+0x58>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <MX_USART2_UART_Init+0x58>)
 800114e:	2200      	movs	r2, #0
 8001150:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <MX_USART2_UART_Init+0x58>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <MX_USART2_UART_Init+0x58>)
 800115a:	2200      	movs	r2, #0
 800115c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800115e:	4805      	ldr	r0, [pc, #20]	; (8001174 <MX_USART2_UART_Init+0x58>)
 8001160:	f002 fc9c 	bl	8003a9c <HAL_UART_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800116a:	f7ff fef1 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000090 	.word	0x20000090
 8001178:	40004400 	.word	0x40004400

0800117c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a17      	ldr	r2, [pc, #92]	; (80011f8 <HAL_UART_MspInit+0x7c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d128      	bne.n	80011f0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800119e:	4b17      	ldr	r3, [pc, #92]	; (80011fc <HAL_UART_MspInit+0x80>)
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	4a16      	ldr	r2, [pc, #88]	; (80011fc <HAL_UART_MspInit+0x80>)
 80011a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a8:	61d3      	str	r3, [r2, #28]
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <HAL_UART_MspInit+0x80>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <HAL_UART_MspInit+0x80>)
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	4a10      	ldr	r2, [pc, #64]	; (80011fc <HAL_UART_MspInit+0x80>)
 80011bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c0:	6153      	str	r3, [r2, #20]
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <HAL_UART_MspInit+0x80>)
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011ce:	230c      	movs	r3, #12
 80011d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2300      	movs	r3, #0
 80011dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011de:	2307      	movs	r3, #7
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4619      	mov	r1, r3
 80011e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ec:	f000 f9a2 	bl	8001534 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011f0:	bf00      	nop
 80011f2:	3728      	adds	r7, #40	; 0x28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40004400 	.word	0x40004400
 80011fc:	40021000 	.word	0x40021000

08001200 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001200:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001238 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001204:	480d      	ldr	r0, [pc, #52]	; (800123c <LoopForever+0x6>)
  ldr r1, =_edata
 8001206:	490e      	ldr	r1, [pc, #56]	; (8001240 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001208:	4a0e      	ldr	r2, [pc, #56]	; (8001244 <LoopForever+0xe>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800120c:	e002      	b.n	8001214 <LoopCopyDataInit>

0800120e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001212:	3304      	adds	r3, #4

08001214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001218:	d3f9      	bcc.n	800120e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121a:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <LoopForever+0x12>)
  ldr r4, =_ebss
 800121c:	4c0b      	ldr	r4, [pc, #44]	; (800124c <LoopForever+0x16>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001220:	e001      	b.n	8001226 <LoopFillZerobss>

08001222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001224:	3204      	adds	r2, #4

08001226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001228:	d3fb      	bcc.n	8001222 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800122a:	f7ff ff65 	bl	80010f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800122e:	f002 ffc1 	bl	80041b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001232:	f7ff fdbf 	bl	8000db4 <main>

08001236 <LoopForever>:

LoopForever:
    b LoopForever
 8001236:	e7fe      	b.n	8001236 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001238:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800123c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001240:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001244:	08004264 	.word	0x08004264
  ldr r2, =_sbss
 8001248:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800124c:	20000118 	.word	0x20000118

08001250 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001250:	e7fe      	b.n	8001250 <ADC1_2_IRQHandler>
	...

08001254 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <HAL_Init+0x28>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a07      	ldr	r2, [pc, #28]	; (800127c <HAL_Init+0x28>)
 800125e:	f043 0310 	orr.w	r3, r3, #16
 8001262:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001264:	2003      	movs	r0, #3
 8001266:	f000 f931 	bl	80014cc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800126a:	2000      	movs	r0, #0
 800126c:	f000 f808 	bl	8001280 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001270:	f7ff fef4 	bl	800105c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40022000 	.word	0x40022000

08001280 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_InitTick+0x54>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_InitTick+0x58>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	4619      	mov	r1, r3
 8001292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001296:	fbb3 f3f1 	udiv	r3, r3, r1
 800129a:	fbb2 f3f3 	udiv	r3, r2, r3
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 f93b 	bl	800151a <HAL_SYSTICK_Config>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00e      	b.n	80012cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b0f      	cmp	r3, #15
 80012b2:	d80a      	bhi.n	80012ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b4:	2200      	movs	r2, #0
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295
 80012bc:	f000 f911 	bl	80014e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c0:	4a06      	ldr	r2, [pc, #24]	; (80012dc <HAL_InitTick+0x5c>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
 80012c8:	e000      	b.n	80012cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000000 	.word	0x20000000
 80012d8:	20000008 	.word	0x20000008
 80012dc:	20000004 	.word	0x20000004

080012e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <HAL_IncTick+0x20>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_IncTick+0x24>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4413      	add	r3, r2
 80012f0:	4a04      	ldr	r2, [pc, #16]	; (8001304 <HAL_IncTick+0x24>)
 80012f2:	6013      	str	r3, [r2, #0]
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000008 	.word	0x20000008
 8001304:	20000114 	.word	0x20000114

08001308 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return uwTick;  
 800130c:	4b03      	ldr	r3, [pc, #12]	; (800131c <HAL_GetTick+0x14>)
 800130e:	681b      	ldr	r3, [r3, #0]
}
 8001310:	4618      	mov	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000114 	.word	0x20000114

08001320 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001328:	f7ff ffee 	bl	8001308 <HAL_GetTick>
 800132c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001338:	d005      	beq.n	8001346 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800133a:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <HAL_Delay+0x44>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	461a      	mov	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4413      	add	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001346:	bf00      	nop
 8001348:	f7ff ffde 	bl	8001308 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	429a      	cmp	r2, r3
 8001356:	d8f7      	bhi.n	8001348 <HAL_Delay+0x28>
  {
  }
}
 8001358:	bf00      	nop
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000008 	.word	0x20000008

08001368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001384:	4013      	ands	r3, r2
 8001386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001390:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800139a:	4a04      	ldr	r2, [pc, #16]	; (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	60d3      	str	r3, [r2, #12]
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b4:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <__NVIC_GetPriorityGrouping+0x18>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	0a1b      	lsrs	r3, r3, #8
 80013ba:	f003 0307 	and.w	r3, r3, #7
}
 80013be:	4618      	mov	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	6039      	str	r1, [r7, #0]
 80013d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	db0a      	blt.n	80013f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	490c      	ldr	r1, [pc, #48]	; (8001418 <__NVIC_SetPriority+0x4c>)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	0112      	lsls	r2, r2, #4
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	440b      	add	r3, r1
 80013f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f4:	e00a      	b.n	800140c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4908      	ldr	r1, [pc, #32]	; (800141c <__NVIC_SetPriority+0x50>)
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	3b04      	subs	r3, #4
 8001404:	0112      	lsls	r2, r2, #4
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	440b      	add	r3, r1
 800140a:	761a      	strb	r2, [r3, #24]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000e100 	.word	0xe000e100
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001420:	b480      	push	{r7}
 8001422:	b089      	sub	sp, #36	; 0x24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f1c3 0307 	rsb	r3, r3, #7
 800143a:	2b04      	cmp	r3, #4
 800143c:	bf28      	it	cs
 800143e:	2304      	movcs	r3, #4
 8001440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3304      	adds	r3, #4
 8001446:	2b06      	cmp	r3, #6
 8001448:	d902      	bls.n	8001450 <NVIC_EncodePriority+0x30>
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3b03      	subs	r3, #3
 800144e:	e000      	b.n	8001452 <NVIC_EncodePriority+0x32>
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	f04f 32ff 	mov.w	r2, #4294967295
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43da      	mvns	r2, r3
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	401a      	ands	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001468:	f04f 31ff 	mov.w	r1, #4294967295
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	fa01 f303 	lsl.w	r3, r1, r3
 8001472:	43d9      	mvns	r1, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	4313      	orrs	r3, r2
         );
}
 800147a:	4618      	mov	r0, r3
 800147c:	3724      	adds	r7, #36	; 0x24
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001498:	d301      	bcc.n	800149e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800149a:	2301      	movs	r3, #1
 800149c:	e00f      	b.n	80014be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149e:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <SysTick_Config+0x40>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a6:	210f      	movs	r1, #15
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ac:	f7ff ff8e 	bl	80013cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <SysTick_Config+0x40>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b6:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <SysTick_Config+0x40>)
 80014b8:	2207      	movs	r2, #7
 80014ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	e000e010 	.word	0xe000e010

080014cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff ff47 	bl	8001368 <__NVIC_SetPriorityGrouping>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b086      	sub	sp, #24
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4603      	mov	r3, r0
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
 80014ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f4:	f7ff ff5c 	bl	80013b0 <__NVIC_GetPriorityGrouping>
 80014f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	68b9      	ldr	r1, [r7, #8]
 80014fe:	6978      	ldr	r0, [r7, #20]
 8001500:	f7ff ff8e 	bl	8001420 <NVIC_EncodePriority>
 8001504:	4602      	mov	r2, r0
 8001506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150a:	4611      	mov	r1, r2
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff5d 	bl	80013cc <__NVIC_SetPriority>
}
 8001512:	bf00      	nop
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff ffb0 	bl	8001488 <SysTick_Config>
 8001528:	4603      	mov	r3, r0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001534:	b480      	push	{r7}
 8001536:	b087      	sub	sp, #28
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001542:	e160      	b.n	8001806 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	2101      	movs	r1, #1
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	fa01 f303 	lsl.w	r3, r1, r3
 8001550:	4013      	ands	r3, r2
 8001552:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 8152 	beq.w	8001800 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d00b      	beq.n	800157c <HAL_GPIO_Init+0x48>
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b02      	cmp	r3, #2
 800156a:	d007      	beq.n	800157c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001570:	2b11      	cmp	r3, #17
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b12      	cmp	r3, #18
 800157a:	d130      	bne.n	80015de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	2203      	movs	r2, #3
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	68da      	ldr	r2, [r3, #12]
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015b2:	2201      	movs	r2, #1
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	091b      	lsrs	r3, r3, #4
 80015c8:	f003 0201 	and.w	r2, r3, #1
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	2203      	movs	r2, #3
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d003      	beq.n	800161e <HAL_GPIO_Init+0xea>
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b12      	cmp	r3, #18
 800161c:	d123      	bne.n	8001666 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	08da      	lsrs	r2, r3, #3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3208      	adds	r2, #8
 8001626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800162a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	220f      	movs	r2, #15
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4013      	ands	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	691a      	ldr	r2, [r3, #16]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	08da      	lsrs	r2, r3, #3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3208      	adds	r2, #8
 8001660:	6939      	ldr	r1, [r7, #16]
 8001662:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	2203      	movs	r2, #3
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43db      	mvns	r3, r3
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	4013      	ands	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f003 0203 	and.w	r2, r3, #3
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4313      	orrs	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 80ac 	beq.w	8001800 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a8:	4b5e      	ldr	r3, [pc, #376]	; (8001824 <HAL_GPIO_Init+0x2f0>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	4a5d      	ldr	r2, [pc, #372]	; (8001824 <HAL_GPIO_Init+0x2f0>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6193      	str	r3, [r2, #24]
 80016b4:	4b5b      	ldr	r3, [pc, #364]	; (8001824 <HAL_GPIO_Init+0x2f0>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016c0:	4a59      	ldr	r2, [pc, #356]	; (8001828 <HAL_GPIO_Init+0x2f4>)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	089b      	lsrs	r3, r3, #2
 80016c6:	3302      	adds	r3, #2
 80016c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	220f      	movs	r2, #15
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4013      	ands	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016ea:	d025      	beq.n	8001738 <HAL_GPIO_Init+0x204>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a4f      	ldr	r2, [pc, #316]	; (800182c <HAL_GPIO_Init+0x2f8>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d01f      	beq.n	8001734 <HAL_GPIO_Init+0x200>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a4e      	ldr	r2, [pc, #312]	; (8001830 <HAL_GPIO_Init+0x2fc>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d019      	beq.n	8001730 <HAL_GPIO_Init+0x1fc>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a4d      	ldr	r2, [pc, #308]	; (8001834 <HAL_GPIO_Init+0x300>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d013      	beq.n	800172c <HAL_GPIO_Init+0x1f8>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a4c      	ldr	r2, [pc, #304]	; (8001838 <HAL_GPIO_Init+0x304>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d00d      	beq.n	8001728 <HAL_GPIO_Init+0x1f4>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a4b      	ldr	r2, [pc, #300]	; (800183c <HAL_GPIO_Init+0x308>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d007      	beq.n	8001724 <HAL_GPIO_Init+0x1f0>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a4a      	ldr	r2, [pc, #296]	; (8001840 <HAL_GPIO_Init+0x30c>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d101      	bne.n	8001720 <HAL_GPIO_Init+0x1ec>
 800171c:	2306      	movs	r3, #6
 800171e:	e00c      	b.n	800173a <HAL_GPIO_Init+0x206>
 8001720:	2307      	movs	r3, #7
 8001722:	e00a      	b.n	800173a <HAL_GPIO_Init+0x206>
 8001724:	2305      	movs	r3, #5
 8001726:	e008      	b.n	800173a <HAL_GPIO_Init+0x206>
 8001728:	2304      	movs	r3, #4
 800172a:	e006      	b.n	800173a <HAL_GPIO_Init+0x206>
 800172c:	2303      	movs	r3, #3
 800172e:	e004      	b.n	800173a <HAL_GPIO_Init+0x206>
 8001730:	2302      	movs	r3, #2
 8001732:	e002      	b.n	800173a <HAL_GPIO_Init+0x206>
 8001734:	2301      	movs	r3, #1
 8001736:	e000      	b.n	800173a <HAL_GPIO_Init+0x206>
 8001738:	2300      	movs	r3, #0
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	f002 0203 	and.w	r2, r2, #3
 8001740:	0092      	lsls	r2, r2, #2
 8001742:	4093      	lsls	r3, r2
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800174a:	4937      	ldr	r1, [pc, #220]	; (8001828 <HAL_GPIO_Init+0x2f4>)
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	3302      	adds	r3, #2
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001758:	4b3a      	ldr	r3, [pc, #232]	; (8001844 <HAL_GPIO_Init+0x310>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	43db      	mvns	r3, r3
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800177c:	4a31      	ldr	r2, [pc, #196]	; (8001844 <HAL_GPIO_Init+0x310>)
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001782:	4b30      	ldr	r3, [pc, #192]	; (8001844 <HAL_GPIO_Init+0x310>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	43db      	mvns	r3, r3
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	4013      	ands	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017a6:	4a27      	ldr	r2, [pc, #156]	; (8001844 <HAL_GPIO_Init+0x310>)
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ac:	4b25      	ldr	r3, [pc, #148]	; (8001844 <HAL_GPIO_Init+0x310>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4013      	ands	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017d0:	4a1c      	ldr	r2, [pc, #112]	; (8001844 <HAL_GPIO_Init+0x310>)
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017d6:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <HAL_GPIO_Init+0x310>)
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	43db      	mvns	r3, r3
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4013      	ands	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017fa:	4a12      	ldr	r2, [pc, #72]	; (8001844 <HAL_GPIO_Init+0x310>)
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	3301      	adds	r3, #1
 8001804:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	fa22 f303 	lsr.w	r3, r2, r3
 8001810:	2b00      	cmp	r3, #0
 8001812:	f47f ae97 	bne.w	8001544 <HAL_GPIO_Init+0x10>
  }
}
 8001816:	bf00      	nop
 8001818:	bf00      	nop
 800181a:	371c      	adds	r7, #28
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	40021000 	.word	0x40021000
 8001828:	40010000 	.word	0x40010000
 800182c:	48000400 	.word	0x48000400
 8001830:	48000800 	.word	0x48000800
 8001834:	48000c00 	.word	0x48000c00
 8001838:	48001000 	.word	0x48001000
 800183c:	48001400 	.word	0x48001400
 8001840:	48001800 	.word	0x48001800
 8001844:	40010400 	.word	0x40010400

08001848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	807b      	strh	r3, [r7, #2]
 8001854:	4613      	mov	r3, r2
 8001856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001858:	787b      	ldrb	r3, [r7, #1]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800185e:	887a      	ldrh	r2, [r7, #2]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001864:	e002      	b.n	800186c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001866:	887a      	ldrh	r2, [r7, #2]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6193      	str	r3, [r2, #24]
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4905      	ldr	r1, [pc, #20]	; (80018b4 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	600b      	str	r3, [r1, #0]
}
 80018a4:	bf00      	nop
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40010000 	.word	0x40010000

080018b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80018be:	af00      	add	r7, sp, #0
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d102      	bne.n	80018d2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	f000 bf01 	b.w	80026d4 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 8160 	beq.w	8001ba2 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018e2:	4bae      	ldr	r3, [pc, #696]	; (8001b9c <HAL_RCC_OscConfig+0x2e4>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 030c 	and.w	r3, r3, #12
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	d00c      	beq.n	8001908 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018ee:	4bab      	ldr	r3, [pc, #684]	; (8001b9c <HAL_RCC_OscConfig+0x2e4>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 030c 	and.w	r3, r3, #12
 80018f6:	2b08      	cmp	r3, #8
 80018f8:	d159      	bne.n	80019ae <HAL_RCC_OscConfig+0xf6>
 80018fa:	4ba8      	ldr	r3, [pc, #672]	; (8001b9c <HAL_RCC_OscConfig+0x2e4>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001906:	d152      	bne.n	80019ae <HAL_RCC_OscConfig+0xf6>
 8001908:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800190c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001910:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001914:	fa93 f3a3 	rbit	r3, r3
 8001918:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800191c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001920:	fab3 f383 	clz	r3, r3
 8001924:	b2db      	uxtb	r3, r3
 8001926:	095b      	lsrs	r3, r3, #5
 8001928:	b2db      	uxtb	r3, r3
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b01      	cmp	r3, #1
 8001932:	d102      	bne.n	800193a <HAL_RCC_OscConfig+0x82>
 8001934:	4b99      	ldr	r3, [pc, #612]	; (8001b9c <HAL_RCC_OscConfig+0x2e4>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	e015      	b.n	8001966 <HAL_RCC_OscConfig+0xae>
 800193a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800193e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001942:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001946:	fa93 f3a3 	rbit	r3, r3
 800194a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800194e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001952:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001956:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800195a:	fa93 f3a3 	rbit	r3, r3
 800195e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001962:	4b8e      	ldr	r3, [pc, #568]	; (8001b9c <HAL_RCC_OscConfig+0x2e4>)
 8001964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001966:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800196a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800196e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001972:	fa92 f2a2 	rbit	r2, r2
 8001976:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800197a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800197e:	fab2 f282 	clz	r2, r2
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	f042 0220 	orr.w	r2, r2, #32
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	f002 021f 	and.w	r2, r2, #31
 800198e:	2101      	movs	r1, #1
 8001990:	fa01 f202 	lsl.w	r2, r1, r2
 8001994:	4013      	ands	r3, r2
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 8102 	beq.w	8001ba0 <HAL_RCC_OscConfig+0x2e8>
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f040 80fc 	bne.w	8001ba0 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	f000 be93 	b.w	80026d4 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b8:	d106      	bne.n	80019c8 <HAL_RCC_OscConfig+0x110>
 80019ba:	4b78      	ldr	r3, [pc, #480]	; (8001b9c <HAL_RCC_OscConfig+0x2e4>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a77      	ldr	r2, [pc, #476]	; (8001b9c <HAL_RCC_OscConfig+0x2e4>)
 80019c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	e030      	b.n	8001a2a <HAL_RCC_OscConfig+0x172>
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10c      	bne.n	80019ec <HAL_RCC_OscConfig+0x134>
 80019d2:	4b72      	ldr	r3, [pc, #456]	; (8001b9c <HAL_RCC_OscConfig+0x2e4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a71      	ldr	r2, [pc, #452]	; (8001b9c <HAL_RCC_OscConfig+0x2e4>)
 80019d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	4b6f      	ldr	r3, [pc, #444]	; (8001b9c <HAL_RCC_OscConfig+0x2e4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a6e      	ldr	r2, [pc, #440]	; (8001b9c <HAL_RCC_OscConfig+0x2e4>)
 80019e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	e01e      	b.n	8001a2a <HAL_RCC_OscConfig+0x172>
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019f6:	d10c      	bne.n	8001a12 <HAL_RCC_OscConfig+0x15a>
 80019f8:	4b68      	ldr	r3, [pc, #416]	; (8001b9c <HAL_RCC_OscConfig+0x2e4>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a67      	ldr	r2, [pc, #412]	; (8001b9c <HAL_RCC_OscConfig+0x2e4>)
 80019fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	4b65      	ldr	r3, [pc, #404]	; (8001b9c <HAL_RCC_OscConfig+0x2e4>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a64      	ldr	r2, [pc, #400]	; (8001b9c <HAL_RCC_OscConfig+0x2e4>)
 8001a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a0e:	6013      	str	r3, [r2, #0]
 8001a10:	e00b      	b.n	8001a2a <HAL_RCC_OscConfig+0x172>
 8001a12:	4b62      	ldr	r3, [pc, #392]	; (8001b9c <HAL_RCC_OscConfig+0x2e4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a61      	ldr	r2, [pc, #388]	; (8001b9c <HAL_RCC_OscConfig+0x2e4>)
 8001a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	4b5f      	ldr	r3, [pc, #380]	; (8001b9c <HAL_RCC_OscConfig+0x2e4>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a5e      	ldr	r2, [pc, #376]	; (8001b9c <HAL_RCC_OscConfig+0x2e4>)
 8001a24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a28:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d059      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a34:	f7ff fc68 	bl	8001308 <HAL_GetTick>
 8001a38:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3c:	e00a      	b.n	8001a54 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a3e:	f7ff fc63 	bl	8001308 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b64      	cmp	r3, #100	; 0x64
 8001a4c:	d902      	bls.n	8001a54 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	f000 be40 	b.w	80026d4 <HAL_RCC_OscConfig+0xe1c>
 8001a54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a58:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001a60:	fa93 f3a3 	rbit	r3, r3
 8001a64:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001a68:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6c:	fab3 f383 	clz	r3, r3
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	095b      	lsrs	r3, r3, #5
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d102      	bne.n	8001a86 <HAL_RCC_OscConfig+0x1ce>
 8001a80:	4b46      	ldr	r3, [pc, #280]	; (8001b9c <HAL_RCC_OscConfig+0x2e4>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	e015      	b.n	8001ab2 <HAL_RCC_OscConfig+0x1fa>
 8001a86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a8a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001a92:	fa93 f3a3 	rbit	r3, r3
 8001a96:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001a9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a9e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001aa2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001aa6:	fa93 f3a3 	rbit	r3, r3
 8001aaa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001aae:	4b3b      	ldr	r3, [pc, #236]	; (8001b9c <HAL_RCC_OscConfig+0x2e4>)
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ab6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001aba:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001abe:	fa92 f2a2 	rbit	r2, r2
 8001ac2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001ac6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001aca:	fab2 f282 	clz	r2, r2
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	f042 0220 	orr.w	r2, r2, #32
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	f002 021f 	and.w	r2, r2, #31
 8001ada:	2101      	movs	r1, #1
 8001adc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0ab      	beq.n	8001a3e <HAL_RCC_OscConfig+0x186>
 8001ae6:	e05c      	b.n	8001ba2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7ff fc0e 	bl	8001308 <HAL_GetTick>
 8001aec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af0:	e00a      	b.n	8001b08 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001af2:	f7ff fc09 	bl	8001308 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b64      	cmp	r3, #100	; 0x64
 8001b00:	d902      	bls.n	8001b08 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	f000 bde6 	b.w	80026d4 <HAL_RCC_OscConfig+0xe1c>
 8001b08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b0c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b10:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001b14:	fa93 f3a3 	rbit	r3, r3
 8001b18:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001b1c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b20:	fab3 f383 	clz	r3, r3
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	095b      	lsrs	r3, r3, #5
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d102      	bne.n	8001b3a <HAL_RCC_OscConfig+0x282>
 8001b34:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <HAL_RCC_OscConfig+0x2e4>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	e015      	b.n	8001b66 <HAL_RCC_OscConfig+0x2ae>
 8001b3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b3e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b42:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001b46:	fa93 f3a3 	rbit	r3, r3
 8001b4a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001b4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b52:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001b56:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001b5a:	fa93 f3a3 	rbit	r3, r3
 8001b5e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001b62:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <HAL_RCC_OscConfig+0x2e4>)
 8001b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b6a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001b6e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001b72:	fa92 f2a2 	rbit	r2, r2
 8001b76:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001b7a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001b7e:	fab2 f282 	clz	r2, r2
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	f042 0220 	orr.w	r2, r2, #32
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	f002 021f 	and.w	r2, r2, #31
 8001b8e:	2101      	movs	r1, #1
 8001b90:	fa01 f202 	lsl.w	r2, r1, r2
 8001b94:	4013      	ands	r3, r2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1ab      	bne.n	8001af2 <HAL_RCC_OscConfig+0x23a>
 8001b9a:	e002      	b.n	8001ba2 <HAL_RCC_OscConfig+0x2ea>
 8001b9c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ba2:	1d3b      	adds	r3, r7, #4
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 8170 	beq.w	8001e92 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bb2:	4bd0      	ldr	r3, [pc, #832]	; (8001ef4 <HAL_RCC_OscConfig+0x63c>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00c      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bbe:	4bcd      	ldr	r3, [pc, #820]	; (8001ef4 <HAL_RCC_OscConfig+0x63c>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 030c 	and.w	r3, r3, #12
 8001bc6:	2b08      	cmp	r3, #8
 8001bc8:	d16d      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x3ee>
 8001bca:	4bca      	ldr	r3, [pc, #808]	; (8001ef4 <HAL_RCC_OscConfig+0x63c>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bd6:	d166      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x3ee>
 8001bd8:	2302      	movs	r3, #2
 8001bda:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bde:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001be2:	fa93 f3a3 	rbit	r3, r3
 8001be6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001bea:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bee:	fab3 f383 	clz	r3, r3
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	095b      	lsrs	r3, r3, #5
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d102      	bne.n	8001c08 <HAL_RCC_OscConfig+0x350>
 8001c02:	4bbc      	ldr	r3, [pc, #752]	; (8001ef4 <HAL_RCC_OscConfig+0x63c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	e013      	b.n	8001c30 <HAL_RCC_OscConfig+0x378>
 8001c08:	2302      	movs	r3, #2
 8001c0a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001c12:	fa93 f3a3 	rbit	r3, r3
 8001c16:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001c20:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001c24:	fa93 f3a3 	rbit	r3, r3
 8001c28:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001c2c:	4bb1      	ldr	r3, [pc, #708]	; (8001ef4 <HAL_RCC_OscConfig+0x63c>)
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	2202      	movs	r2, #2
 8001c32:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001c36:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001c3a:	fa92 f2a2 	rbit	r2, r2
 8001c3e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001c42:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001c46:	fab2 f282 	clz	r2, r2
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	f042 0220 	orr.w	r2, r2, #32
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	f002 021f 	and.w	r2, r2, #31
 8001c56:	2101      	movs	r1, #1
 8001c58:	fa01 f202 	lsl.w	r2, r1, r2
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d007      	beq.n	8001c72 <HAL_RCC_OscConfig+0x3ba>
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d002      	beq.n	8001c72 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	f000 bd31 	b.w	80026d4 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c72:	4ba0      	ldr	r3, [pc, #640]	; (8001ef4 <HAL_RCC_OscConfig+0x63c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	21f8      	movs	r1, #248	; 0xf8
 8001c82:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c86:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001c8a:	fa91 f1a1 	rbit	r1, r1
 8001c8e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001c92:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001c96:	fab1 f181 	clz	r1, r1
 8001c9a:	b2c9      	uxtb	r1, r1
 8001c9c:	408b      	lsls	r3, r1
 8001c9e:	4995      	ldr	r1, [pc, #596]	; (8001ef4 <HAL_RCC_OscConfig+0x63c>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca4:	e0f5      	b.n	8001e92 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ca6:	1d3b      	adds	r3, r7, #4
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 8085 	beq.w	8001dbc <HAL_RCC_OscConfig+0x504>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001cbc:	fa93 f3a3 	rbit	r3, r3
 8001cc0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001cc4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc8:	fab3 f383 	clz	r3, r3
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cd2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	461a      	mov	r2, r3
 8001cda:	2301      	movs	r3, #1
 8001cdc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cde:	f7ff fb13 	bl	8001308 <HAL_GetTick>
 8001ce2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce6:	e00a      	b.n	8001cfe <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ce8:	f7ff fb0e 	bl	8001308 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d902      	bls.n	8001cfe <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	f000 bceb 	b.w	80026d4 <HAL_RCC_OscConfig+0xe1c>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d04:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001d08:	fa93 f3a3 	rbit	r3, r3
 8001d0c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001d10:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d14:	fab3 f383 	clz	r3, r3
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d102      	bne.n	8001d2e <HAL_RCC_OscConfig+0x476>
 8001d28:	4b72      	ldr	r3, [pc, #456]	; (8001ef4 <HAL_RCC_OscConfig+0x63c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	e013      	b.n	8001d56 <HAL_RCC_OscConfig+0x49e>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d34:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001d38:	fa93 f3a3 	rbit	r3, r3
 8001d3c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001d40:	2302      	movs	r3, #2
 8001d42:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001d46:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001d4a:	fa93 f3a3 	rbit	r3, r3
 8001d4e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001d52:	4b68      	ldr	r3, [pc, #416]	; (8001ef4 <HAL_RCC_OscConfig+0x63c>)
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d56:	2202      	movs	r2, #2
 8001d58:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001d5c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001d60:	fa92 f2a2 	rbit	r2, r2
 8001d64:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001d68:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001d6c:	fab2 f282 	clz	r2, r2
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	f042 0220 	orr.w	r2, r2, #32
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	f002 021f 	and.w	r2, r2, #31
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d82:	4013      	ands	r3, r2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0af      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d88:	4b5a      	ldr	r3, [pc, #360]	; (8001ef4 <HAL_RCC_OscConfig+0x63c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d90:	1d3b      	adds	r3, r7, #4
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	21f8      	movs	r1, #248	; 0xf8
 8001d98:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001da0:	fa91 f1a1 	rbit	r1, r1
 8001da4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001da8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001dac:	fab1 f181 	clz	r1, r1
 8001db0:	b2c9      	uxtb	r1, r1
 8001db2:	408b      	lsls	r3, r1
 8001db4:	494f      	ldr	r1, [pc, #316]	; (8001ef4 <HAL_RCC_OscConfig+0x63c>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	600b      	str	r3, [r1, #0]
 8001dba:	e06a      	b.n	8001e92 <HAL_RCC_OscConfig+0x5da>
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001dce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dd2:	fab3 f383 	clz	r3, r3
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ddc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	461a      	mov	r2, r3
 8001de4:	2300      	movs	r3, #0
 8001de6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de8:	f7ff fa8e 	bl	8001308 <HAL_GetTick>
 8001dec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001df0:	e00a      	b.n	8001e08 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001df2:	f7ff fa89 	bl	8001308 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d902      	bls.n	8001e08 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	f000 bc66 	b.w	80026d4 <HAL_RCC_OscConfig+0xe1c>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001e12:	fa93 f3a3 	rbit	r3, r3
 8001e16:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001e1a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1e:	fab3 f383 	clz	r3, r3
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	095b      	lsrs	r3, r3, #5
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d102      	bne.n	8001e38 <HAL_RCC_OscConfig+0x580>
 8001e32:	4b30      	ldr	r3, [pc, #192]	; (8001ef4 <HAL_RCC_OscConfig+0x63c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	e013      	b.n	8001e60 <HAL_RCC_OscConfig+0x5a8>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001e42:	fa93 f3a3 	rbit	r3, r3
 8001e46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001e50:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001e54:	fa93 f3a3 	rbit	r3, r3
 8001e58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001e5c:	4b25      	ldr	r3, [pc, #148]	; (8001ef4 <HAL_RCC_OscConfig+0x63c>)
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	2202      	movs	r2, #2
 8001e62:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001e66:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001e6a:	fa92 f2a2 	rbit	r2, r2
 8001e6e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001e72:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001e76:	fab2 f282 	clz	r2, r2
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	f042 0220 	orr.w	r2, r2, #32
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	f002 021f 	and.w	r2, r2, #31
 8001e86:	2101      	movs	r1, #1
 8001e88:	fa01 f202 	lsl.w	r2, r1, r2
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1af      	bne.n	8001df2 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 80da 	beq.w	8002056 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ea2:	1d3b      	adds	r3, r7, #4
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d069      	beq.n	8001f80 <HAL_RCC_OscConfig+0x6c8>
 8001eac:	2301      	movs	r3, #1
 8001eae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001eb6:	fa93 f3a3 	rbit	r3, r3
 8001eba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001ebe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ec2:	fab3 f383 	clz	r3, r3
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <HAL_RCC_OscConfig+0x640>)
 8001ecc:	4413      	add	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed6:	f7ff fa17 	bl	8001308 <HAL_GetTick>
 8001eda:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ede:	e00d      	b.n	8001efc <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ee0:	f7ff fa12 	bl	8001308 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d905      	bls.n	8001efc <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e3ef      	b.n	80026d4 <HAL_RCC_OscConfig+0xe1c>
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	10908120 	.word	0x10908120
 8001efc:	2302      	movs	r3, #2
 8001efe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001f06:	fa93 f2a3 	rbit	r2, r3
 8001f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001f14:	2202      	movs	r2, #2
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	fa93 f2a3 	rbit	r2, r3
 8001f22:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	fa93 f2a3 	rbit	r2, r3
 8001f3a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001f3e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f40:	4ba4      	ldr	r3, [pc, #656]	; (80021d4 <HAL_RCC_OscConfig+0x91c>)
 8001f42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f44:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001f48:	2102      	movs	r1, #2
 8001f4a:	6019      	str	r1, [r3, #0]
 8001f4c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	fa93 f1a3 	rbit	r1, r3
 8001f56:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001f5a:	6019      	str	r1, [r3, #0]
  return result;
 8001f5c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	fab3 f383 	clz	r3, r3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	f003 031f 	and.w	r3, r3, #31
 8001f72:	2101      	movs	r1, #1
 8001f74:	fa01 f303 	lsl.w	r3, r1, r3
 8001f78:	4013      	ands	r3, r2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0b0      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x628>
 8001f7e:	e06a      	b.n	8002056 <HAL_RCC_OscConfig+0x79e>
 8001f80:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001f84:	2201      	movs	r2, #1
 8001f86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f88:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	fa93 f2a3 	rbit	r2, r3
 8001f92:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001f96:	601a      	str	r2, [r3, #0]
  return result;
 8001f98:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001f9c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f9e:	fab3 f383 	clz	r3, r3
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4b8c      	ldr	r3, [pc, #560]	; (80021d8 <HAL_RCC_OscConfig+0x920>)
 8001fa8:	4413      	add	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	461a      	mov	r2, r3
 8001fae:	2300      	movs	r3, #0
 8001fb0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb2:	f7ff f9a9 	bl	8001308 <HAL_GetTick>
 8001fb6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fba:	e009      	b.n	8001fd0 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fbc:	f7ff f9a4 	bl	8001308 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e381      	b.n	80026d4 <HAL_RCC_OscConfig+0xe1c>
 8001fd0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	fa93 f2a3 	rbit	r2, r3
 8001fe2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001fec:	2202      	movs	r2, #2
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	fa93 f2a3 	rbit	r2, r3
 8001ffa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002004:	2202      	movs	r2, #2
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	fa93 f2a3 	rbit	r2, r3
 8002012:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002016:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002018:	4b6e      	ldr	r3, [pc, #440]	; (80021d4 <HAL_RCC_OscConfig+0x91c>)
 800201a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800201c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002020:	2102      	movs	r1, #2
 8002022:	6019      	str	r1, [r3, #0]
 8002024:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	fa93 f1a3 	rbit	r1, r3
 800202e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002032:	6019      	str	r1, [r3, #0]
  return result;
 8002034:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	fab3 f383 	clz	r3, r3
 800203e:	b2db      	uxtb	r3, r3
 8002040:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002044:	b2db      	uxtb	r3, r3
 8002046:	f003 031f 	and.w	r3, r3, #31
 800204a:	2101      	movs	r1, #1
 800204c:	fa01 f303 	lsl.w	r3, r1, r3
 8002050:	4013      	ands	r3, r2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1b2      	bne.n	8001fbc <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002056:	1d3b      	adds	r3, r7, #4
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 8157 	beq.w	8002314 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002066:	2300      	movs	r3, #0
 8002068:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800206c:	4b59      	ldr	r3, [pc, #356]	; (80021d4 <HAL_RCC_OscConfig+0x91c>)
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d112      	bne.n	800209e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002078:	4b56      	ldr	r3, [pc, #344]	; (80021d4 <HAL_RCC_OscConfig+0x91c>)
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	4a55      	ldr	r2, [pc, #340]	; (80021d4 <HAL_RCC_OscConfig+0x91c>)
 800207e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002082:	61d3      	str	r3, [r2, #28]
 8002084:	4b53      	ldr	r3, [pc, #332]	; (80021d4 <HAL_RCC_OscConfig+0x91c>)
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800208c:	f107 030c 	add.w	r3, r7, #12
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	f107 030c 	add.w	r3, r7, #12
 8002096:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002098:	2301      	movs	r3, #1
 800209a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209e:	4b4f      	ldr	r3, [pc, #316]	; (80021dc <HAL_RCC_OscConfig+0x924>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d11a      	bne.n	80020e0 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020aa:	4b4c      	ldr	r3, [pc, #304]	; (80021dc <HAL_RCC_OscConfig+0x924>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a4b      	ldr	r2, [pc, #300]	; (80021dc <HAL_RCC_OscConfig+0x924>)
 80020b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b6:	f7ff f927 	bl	8001308 <HAL_GetTick>
 80020ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020be:	e009      	b.n	80020d4 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c0:	f7ff f922 	bl	8001308 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b64      	cmp	r3, #100	; 0x64
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e2ff      	b.n	80026d4 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d4:	4b41      	ldr	r3, [pc, #260]	; (80021dc <HAL_RCC_OscConfig+0x924>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0ef      	beq.n	80020c0 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e0:	1d3b      	adds	r3, r7, #4
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d106      	bne.n	80020f8 <HAL_RCC_OscConfig+0x840>
 80020ea:	4b3a      	ldr	r3, [pc, #232]	; (80021d4 <HAL_RCC_OscConfig+0x91c>)
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	4a39      	ldr	r2, [pc, #228]	; (80021d4 <HAL_RCC_OscConfig+0x91c>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	6213      	str	r3, [r2, #32]
 80020f6:	e02f      	b.n	8002158 <HAL_RCC_OscConfig+0x8a0>
 80020f8:	1d3b      	adds	r3, r7, #4
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10c      	bne.n	800211c <HAL_RCC_OscConfig+0x864>
 8002102:	4b34      	ldr	r3, [pc, #208]	; (80021d4 <HAL_RCC_OscConfig+0x91c>)
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	4a33      	ldr	r2, [pc, #204]	; (80021d4 <HAL_RCC_OscConfig+0x91c>)
 8002108:	f023 0301 	bic.w	r3, r3, #1
 800210c:	6213      	str	r3, [r2, #32]
 800210e:	4b31      	ldr	r3, [pc, #196]	; (80021d4 <HAL_RCC_OscConfig+0x91c>)
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	4a30      	ldr	r2, [pc, #192]	; (80021d4 <HAL_RCC_OscConfig+0x91c>)
 8002114:	f023 0304 	bic.w	r3, r3, #4
 8002118:	6213      	str	r3, [r2, #32]
 800211a:	e01d      	b.n	8002158 <HAL_RCC_OscConfig+0x8a0>
 800211c:	1d3b      	adds	r3, r7, #4
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	2b05      	cmp	r3, #5
 8002124:	d10c      	bne.n	8002140 <HAL_RCC_OscConfig+0x888>
 8002126:	4b2b      	ldr	r3, [pc, #172]	; (80021d4 <HAL_RCC_OscConfig+0x91c>)
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	4a2a      	ldr	r2, [pc, #168]	; (80021d4 <HAL_RCC_OscConfig+0x91c>)
 800212c:	f043 0304 	orr.w	r3, r3, #4
 8002130:	6213      	str	r3, [r2, #32]
 8002132:	4b28      	ldr	r3, [pc, #160]	; (80021d4 <HAL_RCC_OscConfig+0x91c>)
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	4a27      	ldr	r2, [pc, #156]	; (80021d4 <HAL_RCC_OscConfig+0x91c>)
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	6213      	str	r3, [r2, #32]
 800213e:	e00b      	b.n	8002158 <HAL_RCC_OscConfig+0x8a0>
 8002140:	4b24      	ldr	r3, [pc, #144]	; (80021d4 <HAL_RCC_OscConfig+0x91c>)
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	4a23      	ldr	r2, [pc, #140]	; (80021d4 <HAL_RCC_OscConfig+0x91c>)
 8002146:	f023 0301 	bic.w	r3, r3, #1
 800214a:	6213      	str	r3, [r2, #32]
 800214c:	4b21      	ldr	r3, [pc, #132]	; (80021d4 <HAL_RCC_OscConfig+0x91c>)
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	4a20      	ldr	r2, [pc, #128]	; (80021d4 <HAL_RCC_OscConfig+0x91c>)
 8002152:	f023 0304 	bic.w	r3, r3, #4
 8002156:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d06a      	beq.n	8002238 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002162:	f7ff f8d1 	bl	8001308 <HAL_GetTick>
 8002166:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800216a:	e00b      	b.n	8002184 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800216c:	f7ff f8cc 	bl	8001308 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	f241 3288 	movw	r2, #5000	; 0x1388
 800217c:	4293      	cmp	r3, r2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e2a7      	b.n	80026d4 <HAL_RCC_OscConfig+0xe1c>
 8002184:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002188:	2202      	movs	r2, #2
 800218a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	fa93 f2a3 	rbit	r2, r3
 8002196:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80021a0:	2202      	movs	r2, #2
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	fa93 f2a3 	rbit	r2, r3
 80021ae:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80021b2:	601a      	str	r2, [r3, #0]
  return result;
 80021b4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80021b8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ba:	fab3 f383 	clz	r3, r3
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	095b      	lsrs	r3, r3, #5
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	f043 0302 	orr.w	r3, r3, #2
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d108      	bne.n	80021e0 <HAL_RCC_OscConfig+0x928>
 80021ce:	4b01      	ldr	r3, [pc, #4]	; (80021d4 <HAL_RCC_OscConfig+0x91c>)
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	e013      	b.n	80021fc <HAL_RCC_OscConfig+0x944>
 80021d4:	40021000 	.word	0x40021000
 80021d8:	10908120 	.word	0x10908120
 80021dc:	40007000 	.word	0x40007000
 80021e0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80021e4:	2202      	movs	r2, #2
 80021e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	fa93 f2a3 	rbit	r2, r3
 80021f2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	4bc0      	ldr	r3, [pc, #768]	; (80024fc <HAL_RCC_OscConfig+0xc44>)
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002200:	2102      	movs	r1, #2
 8002202:	6011      	str	r1, [r2, #0]
 8002204:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002208:	6812      	ldr	r2, [r2, #0]
 800220a:	fa92 f1a2 	rbit	r1, r2
 800220e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002212:	6011      	str	r1, [r2, #0]
  return result;
 8002214:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	fab2 f282 	clz	r2, r2
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	f002 021f 	and.w	r2, r2, #31
 800222a:	2101      	movs	r1, #1
 800222c:	fa01 f202 	lsl.w	r2, r1, r2
 8002230:	4013      	ands	r3, r2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d09a      	beq.n	800216c <HAL_RCC_OscConfig+0x8b4>
 8002236:	e063      	b.n	8002300 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002238:	f7ff f866 	bl	8001308 <HAL_GetTick>
 800223c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002240:	e00b      	b.n	800225a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002242:	f7ff f861 	bl	8001308 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002252:	4293      	cmp	r3, r2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e23c      	b.n	80026d4 <HAL_RCC_OscConfig+0xe1c>
 800225a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800225e:	2202      	movs	r2, #2
 8002260:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	fa93 f2a3 	rbit	r2, r3
 800226c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002276:	2202      	movs	r2, #2
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	fa93 f2a3 	rbit	r2, r3
 8002284:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002288:	601a      	str	r2, [r3, #0]
  return result;
 800228a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800228e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002290:	fab3 f383 	clz	r3, r3
 8002294:	b2db      	uxtb	r3, r3
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	b2db      	uxtb	r3, r3
 800229a:	f043 0302 	orr.w	r3, r3, #2
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d102      	bne.n	80022aa <HAL_RCC_OscConfig+0x9f2>
 80022a4:	4b95      	ldr	r3, [pc, #596]	; (80024fc <HAL_RCC_OscConfig+0xc44>)
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	e00d      	b.n	80022c6 <HAL_RCC_OscConfig+0xa0e>
 80022aa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80022ae:	2202      	movs	r2, #2
 80022b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	fa93 f2a3 	rbit	r2, r3
 80022bc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	4b8e      	ldr	r3, [pc, #568]	; (80024fc <HAL_RCC_OscConfig+0xc44>)
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80022ca:	2102      	movs	r1, #2
 80022cc:	6011      	str	r1, [r2, #0]
 80022ce:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80022d2:	6812      	ldr	r2, [r2, #0]
 80022d4:	fa92 f1a2 	rbit	r1, r2
 80022d8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80022dc:	6011      	str	r1, [r2, #0]
  return result;
 80022de:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80022e2:	6812      	ldr	r2, [r2, #0]
 80022e4:	fab2 f282 	clz	r2, r2
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	f002 021f 	and.w	r2, r2, #31
 80022f4:	2101      	movs	r1, #1
 80022f6:	fa01 f202 	lsl.w	r2, r1, r2
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1a0      	bne.n	8002242 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002300:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002304:	2b01      	cmp	r3, #1
 8002306:	d105      	bne.n	8002314 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002308:	4b7c      	ldr	r3, [pc, #496]	; (80024fc <HAL_RCC_OscConfig+0xc44>)
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	4a7b      	ldr	r2, [pc, #492]	; (80024fc <HAL_RCC_OscConfig+0xc44>)
 800230e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002312:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002314:	1d3b      	adds	r3, r7, #4
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 81d9 	beq.w	80026d2 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002320:	4b76      	ldr	r3, [pc, #472]	; (80024fc <HAL_RCC_OscConfig+0xc44>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 030c 	and.w	r3, r3, #12
 8002328:	2b08      	cmp	r3, #8
 800232a:	f000 81a6 	beq.w	800267a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800232e:	1d3b      	adds	r3, r7, #4
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	2b02      	cmp	r3, #2
 8002336:	f040 811e 	bne.w	8002576 <HAL_RCC_OscConfig+0xcbe>
 800233a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800233e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002342:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002344:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	fa93 f2a3 	rbit	r2, r3
 800234e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002352:	601a      	str	r2, [r3, #0]
  return result;
 8002354:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002358:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800235a:	fab3 f383 	clz	r3, r3
 800235e:	b2db      	uxtb	r3, r3
 8002360:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002364:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	461a      	mov	r2, r3
 800236c:	2300      	movs	r3, #0
 800236e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002370:	f7fe ffca 	bl	8001308 <HAL_GetTick>
 8002374:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002378:	e009      	b.n	800238e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800237a:	f7fe ffc5 	bl	8001308 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e1a2      	b.n	80026d4 <HAL_RCC_OscConfig+0xe1c>
 800238e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002392:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002396:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002398:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	fa93 f2a3 	rbit	r2, r3
 80023a2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80023a6:	601a      	str	r2, [r3, #0]
  return result;
 80023a8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80023ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ae:	fab3 f383 	clz	r3, r3
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	095b      	lsrs	r3, r3, #5
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d102      	bne.n	80023c8 <HAL_RCC_OscConfig+0xb10>
 80023c2:	4b4e      	ldr	r3, [pc, #312]	; (80024fc <HAL_RCC_OscConfig+0xc44>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	e01b      	b.n	8002400 <HAL_RCC_OscConfig+0xb48>
 80023c8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80023cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	fa93 f2a3 	rbit	r2, r3
 80023dc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80023e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	fa93 f2a3 	rbit	r2, r3
 80023f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	4b3f      	ldr	r3, [pc, #252]	; (80024fc <HAL_RCC_OscConfig+0xc44>)
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002404:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002408:	6011      	str	r1, [r2, #0]
 800240a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800240e:	6812      	ldr	r2, [r2, #0]
 8002410:	fa92 f1a2 	rbit	r1, r2
 8002414:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002418:	6011      	str	r1, [r2, #0]
  return result;
 800241a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800241e:	6812      	ldr	r2, [r2, #0]
 8002420:	fab2 f282 	clz	r2, r2
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	f042 0220 	orr.w	r2, r2, #32
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	f002 021f 	and.w	r2, r2, #31
 8002430:	2101      	movs	r1, #1
 8002432:	fa01 f202 	lsl.w	r2, r1, r2
 8002436:	4013      	ands	r3, r2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d19e      	bne.n	800237a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800243c:	4b2f      	ldr	r3, [pc, #188]	; (80024fc <HAL_RCC_OscConfig+0xc44>)
 800243e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002440:	f023 020f 	bic.w	r2, r3, #15
 8002444:	1d3b      	adds	r3, r7, #4
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	492c      	ldr	r1, [pc, #176]	; (80024fc <HAL_RCC_OscConfig+0xc44>)
 800244c:	4313      	orrs	r3, r2
 800244e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002450:	4b2a      	ldr	r3, [pc, #168]	; (80024fc <HAL_RCC_OscConfig+0xc44>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6a19      	ldr	r1, [r3, #32]
 800245e:	1d3b      	adds	r3, r7, #4
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	430b      	orrs	r3, r1
 8002466:	4925      	ldr	r1, [pc, #148]	; (80024fc <HAL_RCC_OscConfig+0xc44>)
 8002468:	4313      	orrs	r3, r2
 800246a:	604b      	str	r3, [r1, #4]
 800246c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002470:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002474:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002476:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	fa93 f2a3 	rbit	r2, r3
 8002480:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002484:	601a      	str	r2, [r3, #0]
  return result;
 8002486:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800248a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800248c:	fab3 f383 	clz	r3, r3
 8002490:	b2db      	uxtb	r3, r3
 8002492:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002496:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	461a      	mov	r2, r3
 800249e:	2301      	movs	r3, #1
 80024a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a2:	f7fe ff31 	bl	8001308 <HAL_GetTick>
 80024a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024aa:	e009      	b.n	80024c0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ac:	f7fe ff2c 	bl	8001308 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e109      	b.n	80026d4 <HAL_RCC_OscConfig+0xe1c>
 80024c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	fa93 f2a3 	rbit	r2, r3
 80024d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024d8:	601a      	str	r2, [r3, #0]
  return result;
 80024da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024de:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024e0:	fab3 f383 	clz	r3, r3
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	095b      	lsrs	r3, r3, #5
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d105      	bne.n	8002500 <HAL_RCC_OscConfig+0xc48>
 80024f4:	4b01      	ldr	r3, [pc, #4]	; (80024fc <HAL_RCC_OscConfig+0xc44>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	e01e      	b.n	8002538 <HAL_RCC_OscConfig+0xc80>
 80024fa:	bf00      	nop
 80024fc:	40021000 	.word	0x40021000
 8002500:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002504:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002508:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	fa93 f2a3 	rbit	r2, r3
 8002514:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800251e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	fa93 f2a3 	rbit	r2, r3
 800252e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	4b6a      	ldr	r3, [pc, #424]	; (80026e0 <HAL_RCC_OscConfig+0xe28>)
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800253c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002540:	6011      	str	r1, [r2, #0]
 8002542:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	fa92 f1a2 	rbit	r1, r2
 800254c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002550:	6011      	str	r1, [r2, #0]
  return result;
 8002552:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	fab2 f282 	clz	r2, r2
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	f042 0220 	orr.w	r2, r2, #32
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	f002 021f 	and.w	r2, r2, #31
 8002568:	2101      	movs	r1, #1
 800256a:	fa01 f202 	lsl.w	r2, r1, r2
 800256e:	4013      	ands	r3, r2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d09b      	beq.n	80024ac <HAL_RCC_OscConfig+0xbf4>
 8002574:	e0ad      	b.n	80026d2 <HAL_RCC_OscConfig+0xe1a>
 8002576:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800257a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800257e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002580:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	fa93 f2a3 	rbit	r2, r3
 800258a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800258e:	601a      	str	r2, [r3, #0]
  return result;
 8002590:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002594:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002596:	fab3 f383 	clz	r3, r3
 800259a:	b2db      	uxtb	r3, r3
 800259c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	461a      	mov	r2, r3
 80025a8:	2300      	movs	r3, #0
 80025aa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ac:	f7fe feac 	bl	8001308 <HAL_GetTick>
 80025b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b4:	e009      	b.n	80025ca <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b6:	f7fe fea7 	bl	8001308 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e084      	b.n	80026d4 <HAL_RCC_OscConfig+0xe1c>
 80025ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	fa93 f2a3 	rbit	r2, r3
 80025de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025e2:	601a      	str	r2, [r3, #0]
  return result;
 80025e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ea:	fab3 f383 	clz	r3, r3
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	095b      	lsrs	r3, r3, #5
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d102      	bne.n	8002604 <HAL_RCC_OscConfig+0xd4c>
 80025fe:	4b38      	ldr	r3, [pc, #224]	; (80026e0 <HAL_RCC_OscConfig+0xe28>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	e01b      	b.n	800263c <HAL_RCC_OscConfig+0xd84>
 8002604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002608:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800260c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	fa93 f2a3 	rbit	r2, r3
 8002618:	f107 0320 	add.w	r3, r7, #32
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	f107 031c 	add.w	r3, r7, #28
 8002622:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	f107 031c 	add.w	r3, r7, #28
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	fa93 f2a3 	rbit	r2, r3
 8002632:	f107 0318 	add.w	r3, r7, #24
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	4b29      	ldr	r3, [pc, #164]	; (80026e0 <HAL_RCC_OscConfig+0xe28>)
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	f107 0214 	add.w	r2, r7, #20
 8002640:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002644:	6011      	str	r1, [r2, #0]
 8002646:	f107 0214 	add.w	r2, r7, #20
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	fa92 f1a2 	rbit	r1, r2
 8002650:	f107 0210 	add.w	r2, r7, #16
 8002654:	6011      	str	r1, [r2, #0]
  return result;
 8002656:	f107 0210 	add.w	r2, r7, #16
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	fab2 f282 	clz	r2, r2
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	f042 0220 	orr.w	r2, r2, #32
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	f002 021f 	and.w	r2, r2, #31
 800266c:	2101      	movs	r1, #1
 800266e:	fa01 f202 	lsl.w	r2, r1, r2
 8002672:	4013      	ands	r3, r2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d19e      	bne.n	80025b6 <HAL_RCC_OscConfig+0xcfe>
 8002678:	e02b      	b.n	80026d2 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800267a:	1d3b      	adds	r3, r7, #4
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d101      	bne.n	8002688 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e025      	b.n	80026d4 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002688:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <HAL_RCC_OscConfig+0xe28>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002690:	4b13      	ldr	r3, [pc, #76]	; (80026e0 <HAL_RCC_OscConfig+0xe28>)
 8002692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002694:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002698:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800269c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80026a0:	1d3b      	adds	r3, r7, #4
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d111      	bne.n	80026ce <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80026aa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80026ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026b2:	1d3b      	adds	r3, r7, #4
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d108      	bne.n	80026ce <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80026bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026c0:	f003 020f 	and.w	r2, r3, #15
 80026c4:	1d3b      	adds	r3, r7, #4
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d001      	beq.n	80026d2 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e000      	b.n	80026d4 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40021000 	.word	0x40021000

080026e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b09e      	sub	sp, #120	; 0x78
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e162      	b.n	80029c2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026fc:	4b90      	ldr	r3, [pc, #576]	; (8002940 <HAL_RCC_ClockConfig+0x25c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d910      	bls.n	800272c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270a:	4b8d      	ldr	r3, [pc, #564]	; (8002940 <HAL_RCC_ClockConfig+0x25c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f023 0207 	bic.w	r2, r3, #7
 8002712:	498b      	ldr	r1, [pc, #556]	; (8002940 <HAL_RCC_ClockConfig+0x25c>)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	4313      	orrs	r3, r2
 8002718:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800271a:	4b89      	ldr	r3, [pc, #548]	; (8002940 <HAL_RCC_ClockConfig+0x25c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d001      	beq.n	800272c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e14a      	b.n	80029c2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d008      	beq.n	800274a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002738:	4b82      	ldr	r3, [pc, #520]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	497f      	ldr	r1, [pc, #508]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 8002746:	4313      	orrs	r3, r2
 8002748:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 80dc 	beq.w	8002910 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d13c      	bne.n	80027da <HAL_RCC_ClockConfig+0xf6>
 8002760:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002764:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002766:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002768:	fa93 f3a3 	rbit	r3, r3
 800276c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800276e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002770:	fab3 f383 	clz	r3, r3
 8002774:	b2db      	uxtb	r3, r3
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b01      	cmp	r3, #1
 8002782:	d102      	bne.n	800278a <HAL_RCC_ClockConfig+0xa6>
 8002784:	4b6f      	ldr	r3, [pc, #444]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	e00f      	b.n	80027aa <HAL_RCC_ClockConfig+0xc6>
 800278a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800278e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002792:	fa93 f3a3 	rbit	r3, r3
 8002796:	667b      	str	r3, [r7, #100]	; 0x64
 8002798:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800279c:	663b      	str	r3, [r7, #96]	; 0x60
 800279e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027a0:	fa93 f3a3 	rbit	r3, r3
 80027a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027a6:	4b67      	ldr	r3, [pc, #412]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80027b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027b2:	fa92 f2a2 	rbit	r2, r2
 80027b6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80027b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80027ba:	fab2 f282 	clz	r2, r2
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	f042 0220 	orr.w	r2, r2, #32
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	f002 021f 	and.w	r2, r2, #31
 80027ca:	2101      	movs	r1, #1
 80027cc:	fa01 f202 	lsl.w	r2, r1, r2
 80027d0:	4013      	ands	r3, r2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d17b      	bne.n	80028ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e0f3      	b.n	80029c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d13c      	bne.n	800285c <HAL_RCC_ClockConfig+0x178>
 80027e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ea:	fa93 f3a3 	rbit	r3, r3
 80027ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80027f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f2:	fab3 f383 	clz	r3, r3
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	095b      	lsrs	r3, r3, #5
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b01      	cmp	r3, #1
 8002804:	d102      	bne.n	800280c <HAL_RCC_ClockConfig+0x128>
 8002806:	4b4f      	ldr	r3, [pc, #316]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	e00f      	b.n	800282c <HAL_RCC_ClockConfig+0x148>
 800280c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002810:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002814:	fa93 f3a3 	rbit	r3, r3
 8002818:	647b      	str	r3, [r7, #68]	; 0x44
 800281a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800281e:	643b      	str	r3, [r7, #64]	; 0x40
 8002820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002822:	fa93 f3a3 	rbit	r3, r3
 8002826:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002828:	4b46      	ldr	r3, [pc, #280]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002830:	63ba      	str	r2, [r7, #56]	; 0x38
 8002832:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002834:	fa92 f2a2 	rbit	r2, r2
 8002838:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800283a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800283c:	fab2 f282 	clz	r2, r2
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	f042 0220 	orr.w	r2, r2, #32
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	f002 021f 	and.w	r2, r2, #31
 800284c:	2101      	movs	r1, #1
 800284e:	fa01 f202 	lsl.w	r2, r1, r2
 8002852:	4013      	ands	r3, r2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d13a      	bne.n	80028ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e0b2      	b.n	80029c2 <HAL_RCC_ClockConfig+0x2de>
 800285c:	2302      	movs	r3, #2
 800285e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002862:	fa93 f3a3 	rbit	r3, r3
 8002866:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800286a:	fab3 f383 	clz	r3, r3
 800286e:	b2db      	uxtb	r3, r3
 8002870:	095b      	lsrs	r3, r3, #5
 8002872:	b2db      	uxtb	r3, r3
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b01      	cmp	r3, #1
 800287c:	d102      	bne.n	8002884 <HAL_RCC_ClockConfig+0x1a0>
 800287e:	4b31      	ldr	r3, [pc, #196]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	e00d      	b.n	80028a0 <HAL_RCC_ClockConfig+0x1bc>
 8002884:	2302      	movs	r3, #2
 8002886:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288a:	fa93 f3a3 	rbit	r3, r3
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
 8002890:	2302      	movs	r3, #2
 8002892:	623b      	str	r3, [r7, #32]
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	fa93 f3a3 	rbit	r3, r3
 800289a:	61fb      	str	r3, [r7, #28]
 800289c:	4b29      	ldr	r3, [pc, #164]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	2202      	movs	r2, #2
 80028a2:	61ba      	str	r2, [r7, #24]
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	fa92 f2a2 	rbit	r2, r2
 80028aa:	617a      	str	r2, [r7, #20]
  return result;
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	fab2 f282 	clz	r2, r2
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	f042 0220 	orr.w	r2, r2, #32
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	f002 021f 	and.w	r2, r2, #31
 80028be:	2101      	movs	r1, #1
 80028c0:	fa01 f202 	lsl.w	r2, r1, r2
 80028c4:	4013      	ands	r3, r2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e079      	b.n	80029c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ce:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f023 0203 	bic.w	r2, r3, #3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	491a      	ldr	r1, [pc, #104]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028e0:	f7fe fd12 	bl	8001308 <HAL_GetTick>
 80028e4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e6:	e00a      	b.n	80028fe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e8:	f7fe fd0e 	bl	8001308 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e061      	b.n	80029c2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fe:	4b11      	ldr	r3, [pc, #68]	; (8002944 <HAL_RCC_ClockConfig+0x260>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f003 020c 	and.w	r2, r3, #12
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	429a      	cmp	r2, r3
 800290e:	d1eb      	bne.n	80028e8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002910:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <HAL_RCC_ClockConfig+0x25c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d214      	bcs.n	8002948 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291e:	4b08      	ldr	r3, [pc, #32]	; (8002940 <HAL_RCC_ClockConfig+0x25c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f023 0207 	bic.w	r2, r3, #7
 8002926:	4906      	ldr	r1, [pc, #24]	; (8002940 <HAL_RCC_ClockConfig+0x25c>)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	4313      	orrs	r3, r2
 800292c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800292e:	4b04      	ldr	r3, [pc, #16]	; (8002940 <HAL_RCC_ClockConfig+0x25c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d005      	beq.n	8002948 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e040      	b.n	80029c2 <HAL_RCC_ClockConfig+0x2de>
 8002940:	40022000 	.word	0x40022000
 8002944:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d008      	beq.n	8002966 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002954:	4b1d      	ldr	r3, [pc, #116]	; (80029cc <HAL_RCC_ClockConfig+0x2e8>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	491a      	ldr	r1, [pc, #104]	; (80029cc <HAL_RCC_ClockConfig+0x2e8>)
 8002962:	4313      	orrs	r3, r2
 8002964:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d009      	beq.n	8002986 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002972:	4b16      	ldr	r3, [pc, #88]	; (80029cc <HAL_RCC_ClockConfig+0x2e8>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	4912      	ldr	r1, [pc, #72]	; (80029cc <HAL_RCC_ClockConfig+0x2e8>)
 8002982:	4313      	orrs	r3, r2
 8002984:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002986:	f000 f829 	bl	80029dc <HAL_RCC_GetSysClockFreq>
 800298a:	4601      	mov	r1, r0
 800298c:	4b0f      	ldr	r3, [pc, #60]	; (80029cc <HAL_RCC_ClockConfig+0x2e8>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002994:	22f0      	movs	r2, #240	; 0xf0
 8002996:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	fa92 f2a2 	rbit	r2, r2
 800299e:	60fa      	str	r2, [r7, #12]
  return result;
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	fab2 f282 	clz	r2, r2
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	40d3      	lsrs	r3, r2
 80029aa:	4a09      	ldr	r2, [pc, #36]	; (80029d0 <HAL_RCC_ClockConfig+0x2ec>)
 80029ac:	5cd3      	ldrb	r3, [r2, r3]
 80029ae:	fa21 f303 	lsr.w	r3, r1, r3
 80029b2:	4a08      	ldr	r2, [pc, #32]	; (80029d4 <HAL_RCC_ClockConfig+0x2f0>)
 80029b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80029b6:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <HAL_RCC_ClockConfig+0x2f4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe fc60 	bl	8001280 <HAL_InitTick>
  
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3778      	adds	r7, #120	; 0x78
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40021000 	.word	0x40021000
 80029d0:	08004224 	.word	0x08004224
 80029d4:	20000000 	.word	0x20000000
 80029d8:	20000004 	.word	0x20000004

080029dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	b08b      	sub	sp, #44	; 0x2c
 80029e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
 80029e6:	2300      	movs	r3, #0
 80029e8:	61bb      	str	r3, [r7, #24]
 80029ea:	2300      	movs	r3, #0
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80029f6:	4b2a      	ldr	r3, [pc, #168]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f003 030c 	and.w	r3, r3, #12
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d002      	beq.n	8002a0c <HAL_RCC_GetSysClockFreq+0x30>
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d003      	beq.n	8002a12 <HAL_RCC_GetSysClockFreq+0x36>
 8002a0a:	e03f      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a0c:	4b25      	ldr	r3, [pc, #148]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a0e:	623b      	str	r3, [r7, #32]
      break;
 8002a10:	e03f      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a18:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002a1c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	fa92 f2a2 	rbit	r2, r2
 8002a24:	607a      	str	r2, [r7, #4]
  return result;
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	fab2 f282 	clz	r2, r2
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	40d3      	lsrs	r3, r2
 8002a30:	4a1d      	ldr	r2, [pc, #116]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a32:	5cd3      	ldrb	r3, [r2, r3]
 8002a34:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002a36:	4b1a      	ldr	r3, [pc, #104]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	220f      	movs	r2, #15
 8002a40:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	fa92 f2a2 	rbit	r2, r2
 8002a48:	60fa      	str	r2, [r7, #12]
  return result;
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	fab2 f282 	clz	r2, r2
 8002a50:	b2d2      	uxtb	r2, r2
 8002a52:	40d3      	lsrs	r3, r2
 8002a54:	4a15      	ldr	r2, [pc, #84]	; (8002aac <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a56:	5cd3      	ldrb	r3, [r2, r3]
 8002a58:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d008      	beq.n	8002a76 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a64:	4a0f      	ldr	r2, [pc, #60]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	fb02 f303 	mul.w	r3, r2, r3
 8002a72:	627b      	str	r3, [r7, #36]	; 0x24
 8002a74:	e007      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a76:	4a0b      	ldr	r2, [pc, #44]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	fb02 f303 	mul.w	r3, r2, r3
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	623b      	str	r3, [r7, #32]
      break;
 8002a8a:	e002      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a8c:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a8e:	623b      	str	r3, [r7, #32]
      break;
 8002a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a92:	6a3b      	ldr	r3, [r7, #32]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	372c      	adds	r7, #44	; 0x2c
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	007a1200 	.word	0x007a1200
 8002aa8:	0800423c 	.word	0x0800423c
 8002aac:	0800424c 	.word	0x0800424c

08002ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab4:	4b03      	ldr	r3, [pc, #12]	; (8002ac4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	20000000 	.word	0x20000000

08002ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002ace:	f7ff ffef 	bl	8002ab0 <HAL_RCC_GetHCLKFreq>
 8002ad2:	4601      	mov	r1, r0
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002adc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ae0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	fa92 f2a2 	rbit	r2, r2
 8002ae8:	603a      	str	r2, [r7, #0]
  return result;
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	fab2 f282 	clz	r2, r2
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	40d3      	lsrs	r3, r2
 8002af4:	4a04      	ldr	r2, [pc, #16]	; (8002b08 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002af6:	5cd3      	ldrb	r3, [r2, r3]
 8002af8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002afc:	4618      	mov	r0, r3
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40021000 	.word	0x40021000
 8002b08:	08004234 	.word	0x08004234

08002b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b12:	f7ff ffcd 	bl	8002ab0 <HAL_RCC_GetHCLKFreq>
 8002b16:	4601      	mov	r1, r0
 8002b18:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002b20:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002b24:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	fa92 f2a2 	rbit	r2, r2
 8002b2c:	603a      	str	r2, [r7, #0]
  return result;
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	fab2 f282 	clz	r2, r2
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	40d3      	lsrs	r3, r2
 8002b38:	4a04      	ldr	r2, [pc, #16]	; (8002b4c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002b3a:	5cd3      	ldrb	r3, [r2, r3]
 8002b3c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002b40:	4618      	mov	r0, r3
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	08004234 	.word	0x08004234

08002b50 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b092      	sub	sp, #72	; 0x48
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002b60:	2300      	movs	r3, #0
 8002b62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 80d4 	beq.w	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b74:	4b4e      	ldr	r3, [pc, #312]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10e      	bne.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b80:	4b4b      	ldr	r3, [pc, #300]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	4a4a      	ldr	r2, [pc, #296]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b8a:	61d3      	str	r3, [r2, #28]
 8002b8c:	4b48      	ldr	r3, [pc, #288]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b94:	60bb      	str	r3, [r7, #8]
 8002b96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9e:	4b45      	ldr	r3, [pc, #276]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d118      	bne.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002baa:	4b42      	ldr	r3, [pc, #264]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a41      	ldr	r2, [pc, #260]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bb6:	f7fe fba7 	bl	8001308 <HAL_GetTick>
 8002bba:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bbe:	f7fe fba3 	bl	8001308 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b64      	cmp	r3, #100	; 0x64
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e1d6      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd0:	4b38      	ldr	r3, [pc, #224]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0f0      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bdc:	4b34      	ldr	r3, [pc, #208]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002be4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 8084 	beq.w	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d07c      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bfc:	4b2c      	ldr	r3, [pc, #176]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0e:	fa93 f3a3 	rbit	r3, r3
 8002c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c16:	fab3 f383 	clz	r3, r3
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4b26      	ldr	r3, [pc, #152]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	461a      	mov	r2, r3
 8002c26:	2301      	movs	r3, #1
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c32:	fa93 f3a3 	rbit	r3, r3
 8002c36:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c3a:	fab3 f383 	clz	r3, r3
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	461a      	mov	r2, r3
 8002c42:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c44:	4413      	add	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	461a      	mov	r2, r3
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c4e:	4a18      	ldr	r2, [pc, #96]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c52:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d04b      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5e:	f7fe fb53 	bl	8001308 <HAL_GetTick>
 8002c62:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c64:	e00a      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c66:	f7fe fb4f 	bl	8001308 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e180      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c82:	fa93 f3a3 	rbit	r3, r3
 8002c86:	627b      	str	r3, [r7, #36]	; 0x24
 8002c88:	2302      	movs	r3, #2
 8002c8a:	623b      	str	r3, [r7, #32]
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	fa93 f3a3 	rbit	r3, r3
 8002c92:	61fb      	str	r3, [r7, #28]
  return result;
 8002c94:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c96:	fab3 f383 	clz	r3, r3
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	095b      	lsrs	r3, r3, #5
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	f043 0302 	orr.w	r3, r3, #2
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d108      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002caa:	4b01      	ldr	r3, [pc, #4]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	e00d      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	40007000 	.word	0x40007000
 8002cb8:	10908100 	.word	0x10908100
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	fa93 f3a3 	rbit	r3, r3
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	4ba0      	ldr	r3, [pc, #640]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	2202      	movs	r2, #2
 8002cce:	613a      	str	r2, [r7, #16]
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	fa92 f2a2 	rbit	r2, r2
 8002cd6:	60fa      	str	r2, [r7, #12]
  return result;
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	fab2 f282 	clz	r2, r2
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	f002 021f 	and.w	r2, r2, #31
 8002cea:	2101      	movs	r1, #1
 8002cec:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0b7      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002cf6:	4b95      	ldr	r3, [pc, #596]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	4992      	ldr	r1, [pc, #584]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d105      	bne.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d10:	4b8e      	ldr	r3, [pc, #568]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	4a8d      	ldr	r2, [pc, #564]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d28:	4b88      	ldr	r3, [pc, #544]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	f023 0203 	bic.w	r2, r3, #3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	4985      	ldr	r1, [pc, #532]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d008      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d46:	4b81      	ldr	r3, [pc, #516]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	497e      	ldr	r1, [pc, #504]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d008      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d64:	4b79      	ldr	r3, [pc, #484]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	4976      	ldr	r1, [pc, #472]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0320 	and.w	r3, r3, #32
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d008      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d82:	4b72      	ldr	r3, [pc, #456]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	f023 0210 	bic.w	r2, r3, #16
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	496f      	ldr	r1, [pc, #444]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002da0:	4b6a      	ldr	r3, [pc, #424]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dac:	4967      	ldr	r1, [pc, #412]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d008      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dbe:	4b63      	ldr	r3, [pc, #396]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	f023 0220 	bic.w	r2, r3, #32
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	4960      	ldr	r1, [pc, #384]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ddc:	4b5b      	ldr	r3, [pc, #364]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	4958      	ldr	r1, [pc, #352]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d008      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dfa:	4b54      	ldr	r3, [pc, #336]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	4951      	ldr	r1, [pc, #324]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0310 	and.w	r3, r3, #16
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d008      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e18:	4b4c      	ldr	r3, [pc, #304]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	4949      	ldr	r1, [pc, #292]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d008      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e36:	4b45      	ldr	r3, [pc, #276]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	4942      	ldr	r1, [pc, #264]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d008      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e54:	4b3d      	ldr	r3, [pc, #244]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e58:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e60:	493a      	ldr	r1, [pc, #232]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d008      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002e72:	4b36      	ldr	r3, [pc, #216]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e76:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7e:	4933      	ldr	r1, [pc, #204]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d008      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e90:	4b2e      	ldr	r3, [pc, #184]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9c:	492b      	ldr	r1, [pc, #172]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d008      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002eae:	4b27      	ldr	r3, [pc, #156]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	4924      	ldr	r1, [pc, #144]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d008      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002ecc:	4b1f      	ldr	r3, [pc, #124]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed8:	491c      	ldr	r1, [pc, #112]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d008      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002eea:	4b18      	ldr	r3, [pc, #96]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef6:	4915      	ldr	r1, [pc, #84]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d008      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002f08:	4b10      	ldr	r3, [pc, #64]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f14:	490d      	ldr	r1, [pc, #52]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d008      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002f26:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f32:	4906      	ldr	r1, [pc, #24]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00c      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002f44:	4b01      	ldr	r3, [pc, #4]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f48:	e002      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002f4a:	bf00      	nop
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f58:	490b      	ldr	r1, [pc, #44]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d008      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002f6a:	4b07      	ldr	r3, [pc, #28]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f76:	4904      	ldr	r1, [pc, #16]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3748      	adds	r7, #72	; 0x48
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40021000 	.word	0x40021000

08002f8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e09d      	b.n	80030da <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d108      	bne.n	8002fb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fae:	d009      	beq.n	8002fc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	61da      	str	r2, [r3, #28]
 8002fb6:	e005      	b.n	8002fc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7fd fffa 	bl	8000fd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ffa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003004:	d902      	bls.n	800300c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003006:	2300      	movs	r3, #0
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	e002      	b.n	8003012 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800300c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003010:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800301a:	d007      	beq.n	800302c <HAL_SPI_Init+0xa0>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003024:	d002      	beq.n	800302c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	431a      	orrs	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003064:	431a      	orrs	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306e:	ea42 0103 	orr.w	r1, r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003076:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	0c1b      	lsrs	r3, r3, #16
 8003088:	f003 0204 	and.w	r2, r3, #4
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	f003 0310 	and.w	r3, r3, #16
 8003094:	431a      	orrs	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80030a8:	ea42 0103 	orr.w	r1, r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	69da      	ldr	r2, [r3, #28]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b088      	sub	sp, #32
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	60f8      	str	r0, [r7, #12]
 80030ea:	60b9      	str	r1, [r7, #8]
 80030ec:	603b      	str	r3, [r7, #0]
 80030ee:	4613      	mov	r3, r2
 80030f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d101      	bne.n	8003104 <HAL_SPI_Transmit+0x22>
 8003100:	2302      	movs	r3, #2
 8003102:	e158      	b.n	80033b6 <HAL_SPI_Transmit+0x2d4>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800310c:	f7fe f8fc 	bl	8001308 <HAL_GetTick>
 8003110:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003112:	88fb      	ldrh	r3, [r7, #6]
 8003114:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b01      	cmp	r3, #1
 8003120:	d002      	beq.n	8003128 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003122:	2302      	movs	r3, #2
 8003124:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003126:	e13d      	b.n	80033a4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d002      	beq.n	8003134 <HAL_SPI_Transmit+0x52>
 800312e:	88fb      	ldrh	r3, [r7, #6]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d102      	bne.n	800313a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003138:	e134      	b.n	80033a4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2203      	movs	r2, #3
 800313e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	88fa      	ldrh	r2, [r7, #6]
 8003152:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	88fa      	ldrh	r2, [r7, #6]
 8003158:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003184:	d10f      	bne.n	80031a6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003194:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b0:	2b40      	cmp	r3, #64	; 0x40
 80031b2:	d007      	beq.n	80031c4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031cc:	d94b      	bls.n	8003266 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d002      	beq.n	80031dc <HAL_SPI_Transmit+0xfa>
 80031d6:	8afb      	ldrh	r3, [r7, #22]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d13e      	bne.n	800325a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e0:	881a      	ldrh	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ec:	1c9a      	adds	r2, r3, #2
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003200:	e02b      	b.n	800325a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b02      	cmp	r3, #2
 800320e:	d112      	bne.n	8003236 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003214:	881a      	ldrh	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003220:	1c9a      	adds	r2, r3, #2
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800322a:	b29b      	uxth	r3, r3
 800322c:	3b01      	subs	r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003234:	e011      	b.n	800325a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003236:	f7fe f867 	bl	8001308 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d803      	bhi.n	800324e <HAL_SPI_Transmit+0x16c>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324c:	d102      	bne.n	8003254 <HAL_SPI_Transmit+0x172>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d102      	bne.n	800325a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003258:	e0a4      	b.n	80033a4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800325e:	b29b      	uxth	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1ce      	bne.n	8003202 <HAL_SPI_Transmit+0x120>
 8003264:	e07c      	b.n	8003360 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <HAL_SPI_Transmit+0x192>
 800326e:	8afb      	ldrh	r3, [r7, #22]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d170      	bne.n	8003356 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003278:	b29b      	uxth	r3, r3
 800327a:	2b01      	cmp	r3, #1
 800327c:	d912      	bls.n	80032a4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003282:	881a      	ldrh	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328e:	1c9a      	adds	r2, r3, #2
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003298:	b29b      	uxth	r3, r3
 800329a:	3b02      	subs	r3, #2
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032a2:	e058      	b.n	8003356 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	330c      	adds	r3, #12
 80032ae:	7812      	ldrb	r2, [r2, #0]
 80032b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80032ca:	e044      	b.n	8003356 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d12b      	bne.n	8003332 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032de:	b29b      	uxth	r3, r3
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d912      	bls.n	800330a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e8:	881a      	ldrh	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f4:	1c9a      	adds	r2, r3, #2
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032fe:	b29b      	uxth	r3, r3
 8003300:	3b02      	subs	r3, #2
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003308:	e025      	b.n	8003356 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	330c      	adds	r3, #12
 8003314:	7812      	ldrb	r2, [r2, #0]
 8003316:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	1c5a      	adds	r2, r3, #1
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003326:	b29b      	uxth	r3, r3
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003330:	e011      	b.n	8003356 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003332:	f7fd ffe9 	bl	8001308 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	429a      	cmp	r2, r3
 8003340:	d803      	bhi.n	800334a <HAL_SPI_Transmit+0x268>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003348:	d102      	bne.n	8003350 <HAL_SPI_Transmit+0x26e>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d102      	bne.n	8003356 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003354:	e026      	b.n	80033a4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800335a:	b29b      	uxth	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1b5      	bne.n	80032cc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	6839      	ldr	r1, [r7, #0]
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 fb53 	bl	8003a10 <SPI_EndRxTxTransaction>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d002      	beq.n	8003376 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2220      	movs	r2, #32
 8003374:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10a      	bne.n	8003394 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800337e:	2300      	movs	r3, #0
 8003380:	613b      	str	r3, [r7, #16]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	613b      	str	r3, [r7, #16]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	613b      	str	r3, [r7, #16]
 8003392:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003398:	2b00      	cmp	r3, #0
 800339a:	d002      	beq.n	80033a2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	77fb      	strb	r3, [r7, #31]
 80033a0:	e000      	b.n	80033a4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80033a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80033b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3720      	adds	r7, #32
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b08a      	sub	sp, #40	; 0x28
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	60f8      	str	r0, [r7, #12]
 80033c6:	60b9      	str	r1, [r7, #8]
 80033c8:	607a      	str	r2, [r7, #4]
 80033ca:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80033cc:	2301      	movs	r3, #1
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d101      	bne.n	80033e4 <HAL_SPI_TransmitReceive+0x26>
 80033e0:	2302      	movs	r3, #2
 80033e2:	e1fb      	b.n	80037dc <HAL_SPI_TransmitReceive+0x41e>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033ec:	f7fd ff8c 	bl	8001308 <HAL_GetTick>
 80033f0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80033f8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003400:	887b      	ldrh	r3, [r7, #2]
 8003402:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003404:	887b      	ldrh	r3, [r7, #2]
 8003406:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003408:	7efb      	ldrb	r3, [r7, #27]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d00e      	beq.n	800342c <HAL_SPI_TransmitReceive+0x6e>
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003414:	d106      	bne.n	8003424 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d102      	bne.n	8003424 <HAL_SPI_TransmitReceive+0x66>
 800341e:	7efb      	ldrb	r3, [r7, #27]
 8003420:	2b04      	cmp	r3, #4
 8003422:	d003      	beq.n	800342c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003424:	2302      	movs	r3, #2
 8003426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800342a:	e1cd      	b.n	80037c8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d005      	beq.n	800343e <HAL_SPI_TransmitReceive+0x80>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d002      	beq.n	800343e <HAL_SPI_TransmitReceive+0x80>
 8003438:	887b      	ldrh	r3, [r7, #2]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d103      	bne.n	8003446 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003444:	e1c0      	b.n	80037c8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b04      	cmp	r3, #4
 8003450:	d003      	beq.n	800345a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2205      	movs	r2, #5
 8003456:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	887a      	ldrh	r2, [r7, #2]
 800346a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	887a      	ldrh	r2, [r7, #2]
 8003472:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	887a      	ldrh	r2, [r7, #2]
 8003480:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	887a      	ldrh	r2, [r7, #2]
 8003486:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800349c:	d802      	bhi.n	80034a4 <HAL_SPI_TransmitReceive+0xe6>
 800349e:	8a3b      	ldrh	r3, [r7, #16]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d908      	bls.n	80034b6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034b2:	605a      	str	r2, [r3, #4]
 80034b4:	e007      	b.n	80034c6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034c4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d0:	2b40      	cmp	r3, #64	; 0x40
 80034d2:	d007      	beq.n	80034e4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034ec:	d97c      	bls.n	80035e8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d002      	beq.n	80034fc <HAL_SPI_TransmitReceive+0x13e>
 80034f6:	8a7b      	ldrh	r3, [r7, #18]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d169      	bne.n	80035d0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003500:	881a      	ldrh	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350c:	1c9a      	adds	r2, r3, #2
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003516:	b29b      	uxth	r3, r3
 8003518:	3b01      	subs	r3, #1
 800351a:	b29a      	uxth	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003520:	e056      	b.n	80035d0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b02      	cmp	r3, #2
 800352e:	d11b      	bne.n	8003568 <HAL_SPI_TransmitReceive+0x1aa>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003534:	b29b      	uxth	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d016      	beq.n	8003568 <HAL_SPI_TransmitReceive+0x1aa>
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	2b01      	cmp	r3, #1
 800353e:	d113      	bne.n	8003568 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003544:	881a      	ldrh	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003550:	1c9a      	adds	r2, r3, #2
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800355a:	b29b      	uxth	r3, r3
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b01      	cmp	r3, #1
 8003574:	d11c      	bne.n	80035b0 <HAL_SPI_TransmitReceive+0x1f2>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800357c:	b29b      	uxth	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d016      	beq.n	80035b0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	b292      	uxth	r2, r2
 800358e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	1c9a      	adds	r2, r3, #2
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035ac:	2301      	movs	r3, #1
 80035ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80035b0:	f7fd feaa 	bl	8001308 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035bc:	429a      	cmp	r2, r3
 80035be:	d807      	bhi.n	80035d0 <HAL_SPI_TransmitReceive+0x212>
 80035c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c6:	d003      	beq.n	80035d0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80035ce:	e0fb      	b.n	80037c8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1a3      	bne.n	8003522 <HAL_SPI_TransmitReceive+0x164>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d19d      	bne.n	8003522 <HAL_SPI_TransmitReceive+0x164>
 80035e6:	e0df      	b.n	80037a8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_SPI_TransmitReceive+0x23a>
 80035f0:	8a7b      	ldrh	r3, [r7, #18]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	f040 80cb 	bne.w	800378e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d912      	bls.n	8003628 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003606:	881a      	ldrh	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003612:	1c9a      	adds	r2, r3, #2
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800361c:	b29b      	uxth	r3, r3
 800361e:	3b02      	subs	r3, #2
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003626:	e0b2      	b.n	800378e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	330c      	adds	r3, #12
 8003632:	7812      	ldrb	r2, [r2, #0]
 8003634:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363a:	1c5a      	adds	r2, r3, #1
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003644:	b29b      	uxth	r3, r3
 8003646:	3b01      	subs	r3, #1
 8003648:	b29a      	uxth	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800364e:	e09e      	b.n	800378e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b02      	cmp	r3, #2
 800365c:	d134      	bne.n	80036c8 <HAL_SPI_TransmitReceive+0x30a>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003662:	b29b      	uxth	r3, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	d02f      	beq.n	80036c8 <HAL_SPI_TransmitReceive+0x30a>
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	2b01      	cmp	r3, #1
 800366c:	d12c      	bne.n	80036c8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003672:	b29b      	uxth	r3, r3
 8003674:	2b01      	cmp	r3, #1
 8003676:	d912      	bls.n	800369e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367c:	881a      	ldrh	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003688:	1c9a      	adds	r2, r3, #2
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003692:	b29b      	uxth	r3, r3
 8003694:	3b02      	subs	r3, #2
 8003696:	b29a      	uxth	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800369c:	e012      	b.n	80036c4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	330c      	adds	r3, #12
 80036a8:	7812      	ldrb	r2, [r2, #0]
 80036aa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d148      	bne.n	8003768 <HAL_SPI_TransmitReceive+0x3aa>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036dc:	b29b      	uxth	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d042      	beq.n	8003768 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d923      	bls.n	8003736 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68da      	ldr	r2, [r3, #12]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	b292      	uxth	r2, r2
 80036fa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	1c9a      	adds	r2, r3, #2
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800370c:	b29b      	uxth	r3, r3
 800370e:	3b02      	subs	r3, #2
 8003710:	b29a      	uxth	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800371e:	b29b      	uxth	r3, r3
 8003720:	2b01      	cmp	r3, #1
 8003722:	d81f      	bhi.n	8003764 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003732:	605a      	str	r2, [r3, #4]
 8003734:	e016      	b.n	8003764 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f103 020c 	add.w	r2, r3, #12
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	7812      	ldrb	r2, [r2, #0]
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003758:	b29b      	uxth	r3, r3
 800375a:	3b01      	subs	r3, #1
 800375c:	b29a      	uxth	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003764:	2301      	movs	r3, #1
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003768:	f7fd fdce 	bl	8001308 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003774:	429a      	cmp	r2, r3
 8003776:	d803      	bhi.n	8003780 <HAL_SPI_TransmitReceive+0x3c2>
 8003778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377e:	d102      	bne.n	8003786 <HAL_SPI_TransmitReceive+0x3c8>
 8003780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003782:	2b00      	cmp	r3, #0
 8003784:	d103      	bne.n	800378e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800378c:	e01c      	b.n	80037c8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003792:	b29b      	uxth	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	f47f af5b 	bne.w	8003650 <HAL_SPI_TransmitReceive+0x292>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f47f af54 	bne.w	8003650 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037a8:	69fa      	ldr	r2, [r7, #28]
 80037aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 f92f 	bl	8003a10 <SPI_EndRxTxTransaction>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d006      	beq.n	80037c6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2220      	movs	r2, #32
 80037c2:	661a      	str	r2, [r3, #96]	; 0x60
 80037c4:	e000      	b.n	80037c8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80037c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80037d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3728      	adds	r7, #40	; 0x28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b088      	sub	sp, #32
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	603b      	str	r3, [r7, #0]
 80037f0:	4613      	mov	r3, r2
 80037f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037f4:	f7fd fd88 	bl	8001308 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fc:	1a9b      	subs	r3, r3, r2
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	4413      	add	r3, r2
 8003802:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003804:	f7fd fd80 	bl	8001308 <HAL_GetTick>
 8003808:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800380a:	4b39      	ldr	r3, [pc, #228]	; (80038f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	015b      	lsls	r3, r3, #5
 8003810:	0d1b      	lsrs	r3, r3, #20
 8003812:	69fa      	ldr	r2, [r7, #28]
 8003814:	fb02 f303 	mul.w	r3, r2, r3
 8003818:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800381a:	e054      	b.n	80038c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003822:	d050      	beq.n	80038c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003824:	f7fd fd70 	bl	8001308 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	69fa      	ldr	r2, [r7, #28]
 8003830:	429a      	cmp	r2, r3
 8003832:	d902      	bls.n	800383a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d13d      	bne.n	80038b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003848:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003852:	d111      	bne.n	8003878 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800385c:	d004      	beq.n	8003868 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003866:	d107      	bne.n	8003878 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003876:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003880:	d10f      	bne.n	80038a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e017      	b.n	80038e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038bc:	2300      	movs	r3, #0
 80038be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	4013      	ands	r3, r2
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	bf0c      	ite	eq
 80038d6:	2301      	moveq	r3, #1
 80038d8:	2300      	movne	r3, #0
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	461a      	mov	r2, r3
 80038de:	79fb      	ldrb	r3, [r7, #7]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d19b      	bne.n	800381c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3720      	adds	r7, #32
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	20000000 	.word	0x20000000

080038f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
 8003900:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003902:	f7fd fd01 	bl	8001308 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390a:	1a9b      	subs	r3, r3, r2
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	4413      	add	r3, r2
 8003910:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003912:	f7fd fcf9 	bl	8001308 <HAL_GetTick>
 8003916:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003918:	4b3c      	ldr	r3, [pc, #240]	; (8003a0c <SPI_WaitFifoStateUntilTimeout+0x118>)
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	4613      	mov	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	00da      	lsls	r2, r3, #3
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	0d1b      	lsrs	r3, r3, #20
 8003928:	69fa      	ldr	r2, [r7, #28]
 800392a:	fb02 f303 	mul.w	r3, r2, r3
 800392e:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8003930:	e05f      	b.n	80039f2 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003938:	d106      	bne.n	8003948 <SPI_WaitFifoStateUntilTimeout+0x54>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d103      	bne.n	8003948 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	330c      	adds	r3, #12
 8003946:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394e:	d050      	beq.n	80039f2 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003950:	f7fd fcda 	bl	8001308 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	69fa      	ldr	r2, [r7, #28]
 800395c:	429a      	cmp	r2, r3
 800395e:	d902      	bls.n	8003966 <SPI_WaitFifoStateUntilTimeout+0x72>
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d13d      	bne.n	80039e2 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003974:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800397e:	d111      	bne.n	80039a4 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003988:	d004      	beq.n	8003994 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003992:	d107      	bne.n	80039a4 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ac:	d10f      	bne.n	80039ce <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e010      	b.n	8003a04 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	4013      	ands	r3, r2
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d197      	bne.n	8003932 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3720      	adds	r7, #32
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	20000000 	.word	0x20000000

08003a10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af02      	add	r7, sp, #8
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f7ff ff63 	bl	80038f4 <SPI_WaitFifoStateUntilTimeout>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d007      	beq.n	8003a44 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a38:	f043 0220 	orr.w	r2, r3, #32
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e027      	b.n	8003a94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	2180      	movs	r1, #128	; 0x80
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f7ff fec8 	bl	80037e4 <SPI_WaitFlagStateUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d007      	beq.n	8003a6a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a5e:	f043 0220 	orr.w	r2, r3, #32
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e014      	b.n	8003a94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f7ff ff3c 	bl	80038f4 <SPI_WaitFifoStateUntilTimeout>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d007      	beq.n	8003a92 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a86:	f043 0220 	orr.w	r2, r3, #32
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e000      	b.n	8003a94 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e040      	b.n	8003b30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d106      	bne.n	8003ac4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fd fb5c 	bl	800117c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2224      	movs	r2, #36	; 0x24
 8003ac8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0201 	bic.w	r2, r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f82c 	bl	8003b38 <UART_SetConfig>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d101      	bne.n	8003aea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e022      	b.n	8003b30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d002      	beq.n	8003af8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f9f6 	bl	8003ee4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0201 	orr.w	r2, r2, #1
 8003b26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 fa7d 	bl	8004028 <UART_CheckIdleState>
 8003b2e:	4603      	mov	r3, r0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b088      	sub	sp, #32
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	69db      	ldr	r3, [r3, #28]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	4bab      	ldr	r3, [pc, #684]	; (8003e10 <UART_SetConfig+0x2d8>)
 8003b64:	4013      	ands	r3, r2
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6812      	ldr	r2, [r2, #0]
 8003b6a:	6979      	ldr	r1, [r7, #20]
 8003b6c:	430b      	orrs	r3, r1
 8003b6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68da      	ldr	r2, [r3, #12]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a99      	ldr	r2, [pc, #612]	; (8003e14 <UART_SetConfig+0x2dc>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d120      	bne.n	8003bf6 <UART_SetConfig+0xbe>
 8003bb4:	4b98      	ldr	r3, [pc, #608]	; (8003e18 <UART_SetConfig+0x2e0>)
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb8:	f003 0303 	and.w	r3, r3, #3
 8003bbc:	2b03      	cmp	r3, #3
 8003bbe:	d817      	bhi.n	8003bf0 <UART_SetConfig+0xb8>
 8003bc0:	a201      	add	r2, pc, #4	; (adr r2, 8003bc8 <UART_SetConfig+0x90>)
 8003bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc6:	bf00      	nop
 8003bc8:	08003bd9 	.word	0x08003bd9
 8003bcc:	08003be5 	.word	0x08003be5
 8003bd0:	08003beb 	.word	0x08003beb
 8003bd4:	08003bdf 	.word	0x08003bdf
 8003bd8:	2301      	movs	r3, #1
 8003bda:	77fb      	strb	r3, [r7, #31]
 8003bdc:	e0b5      	b.n	8003d4a <UART_SetConfig+0x212>
 8003bde:	2302      	movs	r3, #2
 8003be0:	77fb      	strb	r3, [r7, #31]
 8003be2:	e0b2      	b.n	8003d4a <UART_SetConfig+0x212>
 8003be4:	2304      	movs	r3, #4
 8003be6:	77fb      	strb	r3, [r7, #31]
 8003be8:	e0af      	b.n	8003d4a <UART_SetConfig+0x212>
 8003bea:	2308      	movs	r3, #8
 8003bec:	77fb      	strb	r3, [r7, #31]
 8003bee:	e0ac      	b.n	8003d4a <UART_SetConfig+0x212>
 8003bf0:	2310      	movs	r3, #16
 8003bf2:	77fb      	strb	r3, [r7, #31]
 8003bf4:	e0a9      	b.n	8003d4a <UART_SetConfig+0x212>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a88      	ldr	r2, [pc, #544]	; (8003e1c <UART_SetConfig+0x2e4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d124      	bne.n	8003c4a <UART_SetConfig+0x112>
 8003c00:	4b85      	ldr	r3, [pc, #532]	; (8003e18 <UART_SetConfig+0x2e0>)
 8003c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c0c:	d011      	beq.n	8003c32 <UART_SetConfig+0xfa>
 8003c0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c12:	d817      	bhi.n	8003c44 <UART_SetConfig+0x10c>
 8003c14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c18:	d011      	beq.n	8003c3e <UART_SetConfig+0x106>
 8003c1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c1e:	d811      	bhi.n	8003c44 <UART_SetConfig+0x10c>
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <UART_SetConfig+0xf4>
 8003c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c28:	d006      	beq.n	8003c38 <UART_SetConfig+0x100>
 8003c2a:	e00b      	b.n	8003c44 <UART_SetConfig+0x10c>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	77fb      	strb	r3, [r7, #31]
 8003c30:	e08b      	b.n	8003d4a <UART_SetConfig+0x212>
 8003c32:	2302      	movs	r3, #2
 8003c34:	77fb      	strb	r3, [r7, #31]
 8003c36:	e088      	b.n	8003d4a <UART_SetConfig+0x212>
 8003c38:	2304      	movs	r3, #4
 8003c3a:	77fb      	strb	r3, [r7, #31]
 8003c3c:	e085      	b.n	8003d4a <UART_SetConfig+0x212>
 8003c3e:	2308      	movs	r3, #8
 8003c40:	77fb      	strb	r3, [r7, #31]
 8003c42:	e082      	b.n	8003d4a <UART_SetConfig+0x212>
 8003c44:	2310      	movs	r3, #16
 8003c46:	77fb      	strb	r3, [r7, #31]
 8003c48:	e07f      	b.n	8003d4a <UART_SetConfig+0x212>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a74      	ldr	r2, [pc, #464]	; (8003e20 <UART_SetConfig+0x2e8>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d124      	bne.n	8003c9e <UART_SetConfig+0x166>
 8003c54:	4b70      	ldr	r3, [pc, #448]	; (8003e18 <UART_SetConfig+0x2e0>)
 8003c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c58:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003c5c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c60:	d011      	beq.n	8003c86 <UART_SetConfig+0x14e>
 8003c62:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c66:	d817      	bhi.n	8003c98 <UART_SetConfig+0x160>
 8003c68:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c6c:	d011      	beq.n	8003c92 <UART_SetConfig+0x15a>
 8003c6e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c72:	d811      	bhi.n	8003c98 <UART_SetConfig+0x160>
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <UART_SetConfig+0x148>
 8003c78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c7c:	d006      	beq.n	8003c8c <UART_SetConfig+0x154>
 8003c7e:	e00b      	b.n	8003c98 <UART_SetConfig+0x160>
 8003c80:	2300      	movs	r3, #0
 8003c82:	77fb      	strb	r3, [r7, #31]
 8003c84:	e061      	b.n	8003d4a <UART_SetConfig+0x212>
 8003c86:	2302      	movs	r3, #2
 8003c88:	77fb      	strb	r3, [r7, #31]
 8003c8a:	e05e      	b.n	8003d4a <UART_SetConfig+0x212>
 8003c8c:	2304      	movs	r3, #4
 8003c8e:	77fb      	strb	r3, [r7, #31]
 8003c90:	e05b      	b.n	8003d4a <UART_SetConfig+0x212>
 8003c92:	2308      	movs	r3, #8
 8003c94:	77fb      	strb	r3, [r7, #31]
 8003c96:	e058      	b.n	8003d4a <UART_SetConfig+0x212>
 8003c98:	2310      	movs	r3, #16
 8003c9a:	77fb      	strb	r3, [r7, #31]
 8003c9c:	e055      	b.n	8003d4a <UART_SetConfig+0x212>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a60      	ldr	r2, [pc, #384]	; (8003e24 <UART_SetConfig+0x2ec>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d124      	bne.n	8003cf2 <UART_SetConfig+0x1ba>
 8003ca8:	4b5b      	ldr	r3, [pc, #364]	; (8003e18 <UART_SetConfig+0x2e0>)
 8003caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003cb0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003cb4:	d011      	beq.n	8003cda <UART_SetConfig+0x1a2>
 8003cb6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003cba:	d817      	bhi.n	8003cec <UART_SetConfig+0x1b4>
 8003cbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cc0:	d011      	beq.n	8003ce6 <UART_SetConfig+0x1ae>
 8003cc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cc6:	d811      	bhi.n	8003cec <UART_SetConfig+0x1b4>
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <UART_SetConfig+0x19c>
 8003ccc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cd0:	d006      	beq.n	8003ce0 <UART_SetConfig+0x1a8>
 8003cd2:	e00b      	b.n	8003cec <UART_SetConfig+0x1b4>
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	77fb      	strb	r3, [r7, #31]
 8003cd8:	e037      	b.n	8003d4a <UART_SetConfig+0x212>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	77fb      	strb	r3, [r7, #31]
 8003cde:	e034      	b.n	8003d4a <UART_SetConfig+0x212>
 8003ce0:	2304      	movs	r3, #4
 8003ce2:	77fb      	strb	r3, [r7, #31]
 8003ce4:	e031      	b.n	8003d4a <UART_SetConfig+0x212>
 8003ce6:	2308      	movs	r3, #8
 8003ce8:	77fb      	strb	r3, [r7, #31]
 8003cea:	e02e      	b.n	8003d4a <UART_SetConfig+0x212>
 8003cec:	2310      	movs	r3, #16
 8003cee:	77fb      	strb	r3, [r7, #31]
 8003cf0:	e02b      	b.n	8003d4a <UART_SetConfig+0x212>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a4c      	ldr	r2, [pc, #304]	; (8003e28 <UART_SetConfig+0x2f0>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d124      	bne.n	8003d46 <UART_SetConfig+0x20e>
 8003cfc:	4b46      	ldr	r3, [pc, #280]	; (8003e18 <UART_SetConfig+0x2e0>)
 8003cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d00:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003d04:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d08:	d011      	beq.n	8003d2e <UART_SetConfig+0x1f6>
 8003d0a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d0e:	d817      	bhi.n	8003d40 <UART_SetConfig+0x208>
 8003d10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d14:	d011      	beq.n	8003d3a <UART_SetConfig+0x202>
 8003d16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d1a:	d811      	bhi.n	8003d40 <UART_SetConfig+0x208>
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <UART_SetConfig+0x1f0>
 8003d20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d24:	d006      	beq.n	8003d34 <UART_SetConfig+0x1fc>
 8003d26:	e00b      	b.n	8003d40 <UART_SetConfig+0x208>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	77fb      	strb	r3, [r7, #31]
 8003d2c:	e00d      	b.n	8003d4a <UART_SetConfig+0x212>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	77fb      	strb	r3, [r7, #31]
 8003d32:	e00a      	b.n	8003d4a <UART_SetConfig+0x212>
 8003d34:	2304      	movs	r3, #4
 8003d36:	77fb      	strb	r3, [r7, #31]
 8003d38:	e007      	b.n	8003d4a <UART_SetConfig+0x212>
 8003d3a:	2308      	movs	r3, #8
 8003d3c:	77fb      	strb	r3, [r7, #31]
 8003d3e:	e004      	b.n	8003d4a <UART_SetConfig+0x212>
 8003d40:	2310      	movs	r3, #16
 8003d42:	77fb      	strb	r3, [r7, #31]
 8003d44:	e001      	b.n	8003d4a <UART_SetConfig+0x212>
 8003d46:	2310      	movs	r3, #16
 8003d48:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d52:	d16d      	bne.n	8003e30 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8003d54:	7ffb      	ldrb	r3, [r7, #31]
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d827      	bhi.n	8003daa <UART_SetConfig+0x272>
 8003d5a:	a201      	add	r2, pc, #4	; (adr r2, 8003d60 <UART_SetConfig+0x228>)
 8003d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d60:	08003d85 	.word	0x08003d85
 8003d64:	08003d8d 	.word	0x08003d8d
 8003d68:	08003d95 	.word	0x08003d95
 8003d6c:	08003dab 	.word	0x08003dab
 8003d70:	08003d9b 	.word	0x08003d9b
 8003d74:	08003dab 	.word	0x08003dab
 8003d78:	08003dab 	.word	0x08003dab
 8003d7c:	08003dab 	.word	0x08003dab
 8003d80:	08003da3 	.word	0x08003da3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d84:	f7fe fea0 	bl	8002ac8 <HAL_RCC_GetPCLK1Freq>
 8003d88:	61b8      	str	r0, [r7, #24]
        break;
 8003d8a:	e013      	b.n	8003db4 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d8c:	f7fe febe 	bl	8002b0c <HAL_RCC_GetPCLK2Freq>
 8003d90:	61b8      	str	r0, [r7, #24]
        break;
 8003d92:	e00f      	b.n	8003db4 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d94:	4b25      	ldr	r3, [pc, #148]	; (8003e2c <UART_SetConfig+0x2f4>)
 8003d96:	61bb      	str	r3, [r7, #24]
        break;
 8003d98:	e00c      	b.n	8003db4 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d9a:	f7fe fe1f 	bl	80029dc <HAL_RCC_GetSysClockFreq>
 8003d9e:	61b8      	str	r0, [r7, #24]
        break;
 8003da0:	e008      	b.n	8003db4 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003da6:	61bb      	str	r3, [r7, #24]
        break;
 8003da8:	e004      	b.n	8003db4 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	77bb      	strb	r3, [r7, #30]
        break;
 8003db2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 8086 	beq.w	8003ec8 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	005a      	lsls	r2, r3, #1
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	085b      	lsrs	r3, r3, #1
 8003dc6:	441a      	add	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	2b0f      	cmp	r3, #15
 8003dd8:	d916      	bls.n	8003e08 <UART_SetConfig+0x2d0>
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de0:	d212      	bcs.n	8003e08 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	f023 030f 	bic.w	r3, r3, #15
 8003dea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	085b      	lsrs	r3, r3, #1
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	89fb      	ldrh	r3, [r7, #14]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	89fa      	ldrh	r2, [r7, #14]
 8003e04:	60da      	str	r2, [r3, #12]
 8003e06:	e05f      	b.n	8003ec8 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	77bb      	strb	r3, [r7, #30]
 8003e0c:	e05c      	b.n	8003ec8 <UART_SetConfig+0x390>
 8003e0e:	bf00      	nop
 8003e10:	efff69f3 	.word	0xefff69f3
 8003e14:	40013800 	.word	0x40013800
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	40004400 	.word	0x40004400
 8003e20:	40004800 	.word	0x40004800
 8003e24:	40004c00 	.word	0x40004c00
 8003e28:	40005000 	.word	0x40005000
 8003e2c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e30:	7ffb      	ldrb	r3, [r7, #31]
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d827      	bhi.n	8003e86 <UART_SetConfig+0x34e>
 8003e36:	a201      	add	r2, pc, #4	; (adr r2, 8003e3c <UART_SetConfig+0x304>)
 8003e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3c:	08003e61 	.word	0x08003e61
 8003e40:	08003e69 	.word	0x08003e69
 8003e44:	08003e71 	.word	0x08003e71
 8003e48:	08003e87 	.word	0x08003e87
 8003e4c:	08003e77 	.word	0x08003e77
 8003e50:	08003e87 	.word	0x08003e87
 8003e54:	08003e87 	.word	0x08003e87
 8003e58:	08003e87 	.word	0x08003e87
 8003e5c:	08003e7f 	.word	0x08003e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e60:	f7fe fe32 	bl	8002ac8 <HAL_RCC_GetPCLK1Freq>
 8003e64:	61b8      	str	r0, [r7, #24]
        break;
 8003e66:	e013      	b.n	8003e90 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e68:	f7fe fe50 	bl	8002b0c <HAL_RCC_GetPCLK2Freq>
 8003e6c:	61b8      	str	r0, [r7, #24]
        break;
 8003e6e:	e00f      	b.n	8003e90 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e70:	4b1b      	ldr	r3, [pc, #108]	; (8003ee0 <UART_SetConfig+0x3a8>)
 8003e72:	61bb      	str	r3, [r7, #24]
        break;
 8003e74:	e00c      	b.n	8003e90 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e76:	f7fe fdb1 	bl	80029dc <HAL_RCC_GetSysClockFreq>
 8003e7a:	61b8      	str	r0, [r7, #24]
        break;
 8003e7c:	e008      	b.n	8003e90 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e82:	61bb      	str	r3, [r7, #24]
        break;
 8003e84:	e004      	b.n	8003e90 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	77bb      	strb	r3, [r7, #30]
        break;
 8003e8e:	bf00      	nop
    }

    if (pclk != 0U)
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d018      	beq.n	8003ec8 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	085a      	lsrs	r2, r3, #1
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	441a      	add	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	2b0f      	cmp	r3, #15
 8003eb0:	d908      	bls.n	8003ec4 <UART_SetConfig+0x38c>
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb8:	d204      	bcs.n	8003ec4 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	60da      	str	r2, [r3, #12]
 8003ec2:	e001      	b.n	8003ec8 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003ed4:	7fbb      	ldrb	r3, [r7, #30]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3720      	adds	r7, #32
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	007a1200 	.word	0x007a1200

08003ee4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00a      	beq.n	8003f0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00a      	beq.n	8003f30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00a      	beq.n	8003f52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	f003 0308 	and.w	r3, r3, #8
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	f003 0310 	and.w	r3, r3, #16
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00a      	beq.n	8003f96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	f003 0320 	and.w	r3, r3, #32
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00a      	beq.n	8003fb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d01a      	beq.n	8003ffa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fe2:	d10a      	bne.n	8003ffa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	605a      	str	r2, [r3, #4]
  }
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af02      	add	r7, sp, #8
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004038:	f7fd f966 	bl	8001308 <HAL_GetTick>
 800403c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0308 	and.w	r3, r3, #8
 8004048:	2b08      	cmp	r3, #8
 800404a:	d10e      	bne.n	800406a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800404c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f82d 	bl	80040ba <UART_WaitOnFlagUntilTimeout>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e023      	b.n	80040b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b04      	cmp	r3, #4
 8004076:	d10e      	bne.n	8004096 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004078:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f817 	bl	80040ba <UART_WaitOnFlagUntilTimeout>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e00d      	b.n	80040b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2220      	movs	r2, #32
 800409a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2220      	movs	r2, #32
 80040a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b084      	sub	sp, #16
 80040be:	af00      	add	r7, sp, #0
 80040c0:	60f8      	str	r0, [r7, #12]
 80040c2:	60b9      	str	r1, [r7, #8]
 80040c4:	603b      	str	r3, [r7, #0]
 80040c6:	4613      	mov	r3, r2
 80040c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ca:	e05e      	b.n	800418a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d2:	d05a      	beq.n	800418a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040d4:	f7fd f918 	bl	8001308 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d302      	bcc.n	80040ea <UART_WaitOnFlagUntilTimeout+0x30>
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d11b      	bne.n	8004122 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80040f8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0201 	bic.w	r2, r2, #1
 8004108:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2220      	movs	r2, #32
 800410e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2220      	movs	r2, #32
 8004114:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e043      	b.n	80041aa <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	2b00      	cmp	r3, #0
 800412e:	d02c      	beq.n	800418a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800413a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800413e:	d124      	bne.n	800418a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004148:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004158:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0201 	bic.w	r2, r2, #1
 8004168:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2220      	movs	r2, #32
 800416e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2220      	movs	r2, #32
 8004174:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2220      	movs	r2, #32
 800417a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e00f      	b.n	80041aa <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	69da      	ldr	r2, [r3, #28]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	4013      	ands	r3, r2
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	429a      	cmp	r2, r3
 8004198:	bf0c      	ite	eq
 800419a:	2301      	moveq	r3, #1
 800419c:	2300      	movne	r3, #0
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	461a      	mov	r2, r3
 80041a2:	79fb      	ldrb	r3, [r7, #7]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d091      	beq.n	80040cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <__libc_init_array>:
 80041b4:	b570      	push	{r4, r5, r6, lr}
 80041b6:	4d0d      	ldr	r5, [pc, #52]	; (80041ec <__libc_init_array+0x38>)
 80041b8:	4c0d      	ldr	r4, [pc, #52]	; (80041f0 <__libc_init_array+0x3c>)
 80041ba:	1b64      	subs	r4, r4, r5
 80041bc:	10a4      	asrs	r4, r4, #2
 80041be:	2600      	movs	r6, #0
 80041c0:	42a6      	cmp	r6, r4
 80041c2:	d109      	bne.n	80041d8 <__libc_init_array+0x24>
 80041c4:	4d0b      	ldr	r5, [pc, #44]	; (80041f4 <__libc_init_array+0x40>)
 80041c6:	4c0c      	ldr	r4, [pc, #48]	; (80041f8 <__libc_init_array+0x44>)
 80041c8:	f000 f820 	bl	800420c <_init>
 80041cc:	1b64      	subs	r4, r4, r5
 80041ce:	10a4      	asrs	r4, r4, #2
 80041d0:	2600      	movs	r6, #0
 80041d2:	42a6      	cmp	r6, r4
 80041d4:	d105      	bne.n	80041e2 <__libc_init_array+0x2e>
 80041d6:	bd70      	pop	{r4, r5, r6, pc}
 80041d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80041dc:	4798      	blx	r3
 80041de:	3601      	adds	r6, #1
 80041e0:	e7ee      	b.n	80041c0 <__libc_init_array+0xc>
 80041e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80041e6:	4798      	blx	r3
 80041e8:	3601      	adds	r6, #1
 80041ea:	e7f2      	b.n	80041d2 <__libc_init_array+0x1e>
 80041ec:	0800425c 	.word	0x0800425c
 80041f0:	0800425c 	.word	0x0800425c
 80041f4:	0800425c 	.word	0x0800425c
 80041f8:	08004260 	.word	0x08004260

080041fc <memset>:
 80041fc:	4402      	add	r2, r0
 80041fe:	4603      	mov	r3, r0
 8004200:	4293      	cmp	r3, r2
 8004202:	d100      	bne.n	8004206 <memset+0xa>
 8004204:	4770      	bx	lr
 8004206:	f803 1b01 	strb.w	r1, [r3], #1
 800420a:	e7f9      	b.n	8004200 <memset+0x4>

0800420c <_init>:
 800420c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420e:	bf00      	nop
 8004210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004212:	bc08      	pop	{r3}
 8004214:	469e      	mov	lr, r3
 8004216:	4770      	bx	lr

08004218 <_fini>:
 8004218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800421a:	bf00      	nop
 800421c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800421e:	bc08      	pop	{r3}
 8004220:	469e      	mov	lr, r3
 8004222:	4770      	bx	lr
